{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Анализ проведения А/В тестирования."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Перед нами результаты проведения А/В тестирования. В группе А - контрольная, B — новая платёжная воронка.\n",
    "\n",
    "- Дата запуска: 2020-12-07;\n",
    "- Дата остановки набора новых пользователей: 2020-12-21;\n",
    "- Дата остановки: 2021-01-04;\n",
    "- Аудитория: 15% новых пользователей из региона EU;\n",
    "- Назначение теста: тестирование изменений, связанных с внедрением улучшенной рекомендательной системы;\n",
    "- Ожидаемое количество участников теста: 6000.\n",
    "- Ожидаемый эффект: за 14 дней с момента регистрации пользователи покажут улучшение каждой метрики не менее, чем на 10%:\n",
    "    - конверсии в просмотр карточек товаров — событие `product_page`,\n",
    "    - просмотры корзины — `product_cart`,\n",
    "    - покупки — `purchase`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Цели исследования**:\n",
    "\n",
    "1. Оценка корректности проведения теста.\n",
    "2. Анализ результатов теста.\n",
    "\n",
    "**Ход исследования**:\n",
    "Данные о пользовательских активностях в игре возьмем из файла: `final_ab_new_users.csv` и `final_ab_events.csv`. В датасетах представлены данные о пользователях, зарегистрировавшихся с 7 по 21 декабря 2020 года, а также их действия в период с 7 декабря 2020 по 4 января 2021 года. \n",
    "\n",
    "`ab_project_marketing_events.csv` представляет собой календарь маркетинговых событий на 2020 год.\n",
    "\n",
    "`final_ab_participants.csv` — таблица участников тестов.\n",
    "\n",
    "Проверим данные на ошибки и оценим их влияние на исследование. Затем, на этапе предобработки выявим возможность исправить самые критичные ошибки данных.\n",
    "\n",
    "Далее проверим корректность проведения теста. Для этого проверить:\n",
    "\n",
    "1. Соответствие данных требованиям технического задания.\n",
    "2. Время проведения теста. Необходимо убедиться, что оно не совпадает с маркетинговыми и другими активностями.\n",
    "3. Аудиторию теста. Удостоверимся, что нет пересечений с конкурирующим тестом и нет пользователей, участвующих в двух группах теста одновременно. Проверим равномерность распределения по тестовым группам и правильность их формирования.\n",
    "\n",
    "Затем проведем исследовательский анализ данных. Где ответим на несколько вопросов:\n",
    "\n",
    "- Количество событий на пользователя одинаково распределены в выборках?\n",
    "- Как число событий в выборках распределено по дням?\n",
    "- Как меняется конверсия в воронке в выборках на разных этапах?\n",
    "- Какие особенности данных нужно учесть, прежде чем приступать к A/B-тестированию?\n",
    "\n",
    "После этого необходимо произвести оценку результатов A/B-тестирования. Посмотрим, что можно сказать по результатам А/В тестирования и проведем проверку статистическую разницу долей z-критерием.\n",
    "\n",
    "В конце напишем вывод по этапу исследовательского анализа данных и по проведённой оценке результатов A/B-тестирования, а также сделаем общее заключение о корректности проведения теста.\n",
    "\n",
    "Таким образом, исследование пройдёт в несколько этапов:\n",
    " 1. Изучение общей информации.\n",
    " 2. Предобработка данных.\n",
    " 3. Проверка корректности проведения теста.\n",
    " 4. Исследовательский анализ данных.\n",
    " 5. Оценка результатов А/В тестирования. \n",
    " 6. Вывод."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Анализ проведения А/В тестирования.\n",
    "\n",
    "_____\n",
    "###### Данное исследование разделим на несколько частей.\n",
    "\n",
    "##### Часть 1. Изучение общей информации:\n",
    "* [1. Изученеие файлов с данными, получение общей информации, загрузка библиотек.](#1-bullet)\n",
    "##### Часть 2. Предобработка данных:\n",
    "* [2. Нахождение и ликвидация пропусков.](#3-bullet)\n",
    "* [3. Нахождение дубликатов.](#4-bullet)\n",
    "##### Часть 3. Проверка корректности проведения теста:\n",
    "* [1. Проверка соотвествия данных требованиям проекта.](#7-bullet)\n",
    "* [2. Проверка времени проведения проекта.](#19-bullet)\n",
    "* [3. Проверка аудитории теста.](#8-bullet)\n",
    "##### Часть 4. Исследовательский анализ данных:\n",
    "* [1. Распределение событий на пользователя в выборках.](#11-bullet)\n",
    "* [2. Распределение числа событий в выборках по дням.](#12-bullet)\n",
    "* [3. Конверсия в воронке в выборках на разных этапах.](#13-bullet)\n",
    "##### Часть 5. Оценка результатов А/В тестирования:\n",
    "\n",
    "##### Общий вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Изучение общей информации."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='1-bullet'></a>\n",
    "### Изученеие файлов с данными, получение общей информации, загрузка библиотек."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd #импорт библиотеки Pandas\n",
    "import matplotlib.pyplot as plt #импорт библиотеки matplotlib.pyplot\n",
    "import numpy as np #импорт библиотеки numpy\n",
    "from scipy import stats as st #импорт библиотеки stats\n",
    "import math as mth"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def primary(data):\n",
    "    display(data.info())\n",
    "    display(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "marketing = pd.read_csv(\"/datasets/ab_project_marketing_events.csv\", parse_dates=['start_dt','finish_dt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 14 entries, 0 to 13\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count  Dtype         \n",
      "---  ------     --------------  -----         \n",
      " 0   name       14 non-null     object        \n",
      " 1   regions    14 non-null     object        \n",
      " 2   start_dt   14 non-null     datetime64[ns]\n",
      " 3   finish_dt  14 non-null     datetime64[ns]\n",
      "dtypes: datetime64[ns](2), object(2)\n",
      "memory usage: 576.0+ bytes\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>regions</th>\n",
       "      <th>start_dt</th>\n",
       "      <th>finish_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Christmas&amp;New Year Promo</td>\n",
       "      <td>EU, N.America</td>\n",
       "      <td>2020-12-25</td>\n",
       "      <td>2021-01-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>St. Valentine's Day Giveaway</td>\n",
       "      <td>EU, CIS, APAC, N.America</td>\n",
       "      <td>2020-02-14</td>\n",
       "      <td>2020-02-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>St. Patric's Day Promo</td>\n",
       "      <td>EU, N.America</td>\n",
       "      <td>2020-03-17</td>\n",
       "      <td>2020-03-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Easter Promo</td>\n",
       "      <td>EU, CIS, APAC, N.America</td>\n",
       "      <td>2020-04-12</td>\n",
       "      <td>2020-04-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4th of July Promo</td>\n",
       "      <td>N.America</td>\n",
       "      <td>2020-07-04</td>\n",
       "      <td>2020-07-11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           name                   regions   start_dt  \\\n",
       "0      Christmas&New Year Promo             EU, N.America 2020-12-25   \n",
       "1  St. Valentine's Day Giveaway  EU, CIS, APAC, N.America 2020-02-14   \n",
       "2        St. Patric's Day Promo             EU, N.America 2020-03-17   \n",
       "3                  Easter Promo  EU, CIS, APAC, N.America 2020-04-12   \n",
       "4             4th of July Promo                 N.America 2020-07-04   \n",
       "\n",
       "   finish_dt  \n",
       "0 2021-01-03  \n",
       "1 2020-02-16  \n",
       "2 2020-03-19  \n",
       "3 2020-04-19  \n",
       "4 2020-07-11  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(marketing)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `name` — название маркетингового события;\n",
    "- `regions` — регионы, в которых будет проводиться рекламная кампания;\n",
    "- `start_dt` — дата начала кампании;\n",
    "- `finish_dt` — дата завершения кампании."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_users = pd.read_csv(\"/datasets/final_ab_new_users.csv\", parse_dates=['first_date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 61733 entries, 0 to 61732\n",
      "Data columns (total 4 columns):\n",
      " #   Column      Non-Null Count  Dtype         \n",
      "---  ------      --------------  -----         \n",
      " 0   user_id     61733 non-null  object        \n",
      " 1   first_date  61733 non-null  datetime64[ns]\n",
      " 2   region      61733 non-null  object        \n",
      " 3   device      61733 non-null  object        \n",
      "dtypes: datetime64[ns](1), object(3)\n",
      "memory usage: 1.9+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>first_date</th>\n",
       "      <th>region</th>\n",
       "      <th>device</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>D72A72121175D8BE</td>\n",
       "      <td>2020-12-07</td>\n",
       "      <td>EU</td>\n",
       "      <td>PC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F1C668619DFE6E65</td>\n",
       "      <td>2020-12-07</td>\n",
       "      <td>N.America</td>\n",
       "      <td>Android</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2E1BF1D4C37EA01F</td>\n",
       "      <td>2020-12-07</td>\n",
       "      <td>EU</td>\n",
       "      <td>PC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50734A22C0C63768</td>\n",
       "      <td>2020-12-07</td>\n",
       "      <td>EU</td>\n",
       "      <td>iPhone</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>E1BDDCE0DAFA2679</td>\n",
       "      <td>2020-12-07</td>\n",
       "      <td>N.America</td>\n",
       "      <td>iPhone</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            user_id first_date     region   device\n",
       "0  D72A72121175D8BE 2020-12-07         EU       PC\n",
       "1  F1C668619DFE6E65 2020-12-07  N.America  Android\n",
       "2  2E1BF1D4C37EA01F 2020-12-07         EU       PC\n",
       "3  50734A22C0C63768 2020-12-07         EU   iPhone\n",
       "4  E1BDDCE0DAFA2679 2020-12-07  N.America   iPhone"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(new_users)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `user_id` — идентификатор пользователя;\n",
    "- `first_date` — дата регистрации;\n",
    "- `region` — регион пользователя;\n",
    "- `device` — устройство, с которого происходила регистрация."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "events = pd.read_csv(\"/datasets/final_ab_events.csv\", parse_dates=['event_dt'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 440317 entries, 0 to 440316\n",
      "Data columns (total 4 columns):\n",
      " #   Column      Non-Null Count   Dtype         \n",
      "---  ------      --------------   -----         \n",
      " 0   user_id     440317 non-null  object        \n",
      " 1   event_dt    440317 non-null  datetime64[ns]\n",
      " 2   event_name  440317 non-null  object        \n",
      " 3   details     62740 non-null   float64       \n",
      "dtypes: datetime64[ns](1), float64(1), object(2)\n",
      "memory usage: 13.4+ MB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>event_dt</th>\n",
       "      <th>event_name</th>\n",
       "      <th>details</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>E1BDDCE0DAFA2679</td>\n",
       "      <td>2020-12-07 20:22:03</td>\n",
       "      <td>purchase</td>\n",
       "      <td>99.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7B6452F081F49504</td>\n",
       "      <td>2020-12-07 09:22:53</td>\n",
       "      <td>purchase</td>\n",
       "      <td>9.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9CD9F34546DF254C</td>\n",
       "      <td>2020-12-07 12:59:29</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>96F27A054B191457</td>\n",
       "      <td>2020-12-07 04:02:40</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1FD7660FDF94CA1F</td>\n",
       "      <td>2020-12-07 10:15:09</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            user_id            event_dt event_name  details\n",
       "0  E1BDDCE0DAFA2679 2020-12-07 20:22:03   purchase    99.99\n",
       "1  7B6452F081F49504 2020-12-07 09:22:53   purchase     9.99\n",
       "2  9CD9F34546DF254C 2020-12-07 12:59:29   purchase     4.99\n",
       "3  96F27A054B191457 2020-12-07 04:02:40   purchase     4.99\n",
       "4  1FD7660FDF94CA1F 2020-12-07 10:15:09   purchase     4.99"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(events)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `user_id` — идентификатор пользователя;\n",
    "- `event_dt` — дата и время покупки;\n",
    "- `event_name` — тип события;\n",
    "- `details` — дополнительные данные о событии. Например, для покупок, `purchase,` в этом поле хранится стоимость покупки в долларах."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "participants = pd.read_csv(\"/datasets/final_ab_participants.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 18268 entries, 0 to 18267\n",
      "Data columns (total 3 columns):\n",
      " #   Column   Non-Null Count  Dtype \n",
      "---  ------   --------------  ----- \n",
      " 0   user_id  18268 non-null  object\n",
      " 1   group    18268 non-null  object\n",
      " 2   ab_test  18268 non-null  object\n",
      "dtypes: object(3)\n",
      "memory usage: 428.3+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>group</th>\n",
       "      <th>ab_test</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>D1ABA3E2887B6A73</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>A7A3664BD6242119</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>DABC14FDDFADD29E</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>04988C5DF189632E</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>482F14783456D21B</td>\n",
       "      <td>B</td>\n",
       "      <td>recommender_system_test</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            user_id group                  ab_test\n",
       "0  D1ABA3E2887B6A73     A  recommender_system_test\n",
       "1  A7A3664BD6242119     A  recommender_system_test\n",
       "2  DABC14FDDFADD29E     A  recommender_system_test\n",
       "3  04988C5DF189632E     A  recommender_system_test\n",
       "4  482F14783456D21B     B  recommender_system_test"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(participants)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- `user_id` — идентификатор пользователя;\n",
    "- `ab_test` — название теста;\n",
    "- `group` — группа пользователя."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При загрузке данных столбцы с датами были приведены к нужному типу данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Предобработка данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='3-bullet'></a>\n",
    "### Нахождение и ликвидация пропусков."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name         0\n",
       "regions      0\n",
       "start_dt     0\n",
       "finish_dt    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marketing.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id       0\n",
       "first_date    0\n",
       "region        0\n",
       "device        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_users.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id            0\n",
       "event_dt           0\n",
       "event_name         0\n",
       "details       377577\n",
       "dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пропуски в столбце `details` обусловлены тем, что этот столбец показывает стоимость покупки в долларах для события `purchase`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id    0\n",
       "group      0\n",
       "ab_test    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "participants.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='4-bullet'></a>\n",
    "### Нахождение дубликатов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим датасеты на наличие явных дубликатов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marketing.duplicated().sum() #нахождение явных дубликатов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_users.duplicated().sum() #нахождение явных дубликатов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events.duplicated().sum() #нахождение явных дубликатов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "participants.duplicated().sum() #нахождение явных дубликатов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим также некоторые столбцы на неявные дубликаты."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Christmas&New Year Promo', \"St. Valentine's Day Giveaway\",\n",
       "       \"St. Patric's Day Promo\", 'Easter Promo', '4th of July Promo',\n",
       "       'Black Friday Ads Campaign', 'Chinese New Year Promo',\n",
       "       'Labor day (May 1st) Ads Campaign',\n",
       "       \"International Women's Day Promo\",\n",
       "       'Victory Day CIS (May 9th) Event', 'CIS New Year Gift Lottery',\n",
       "       'Dragon Boat Festival Giveaway', \"Single's Day Gift Promo\",\n",
       "       'Chinese Moon Festival'], dtype=object)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marketing['name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['EU, N.America', 'EU, CIS, APAC, N.America', 'N.America', 'APAC',\n",
       "       'EU, CIS, APAC', 'CIS'], dtype=object)"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marketing['regions'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['EU', 'N.America', 'APAC', 'CIS'], dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_users['region'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['PC', 'Android', 'iPhone', 'Mac'], dtype=object)"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_users['device'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['purchase', 'product_cart', 'product_page', 'login'], dtype=object)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events['event_name'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['recommender_system_test', 'interface_eu_test'], dtype=object)"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "participants['ab_test'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка корректности проведения теста"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='7-bullet'></a>\n",
    "### Проверка соотвествия данных требованиям проекта."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим дату запуска теста. По техническому заданию она должна быть: 2020-12-07."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-07 00:00:00')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_users['first_date'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-07 00:00:33')"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events['event_dt'].min()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим также дату остановки набора новых пользователей. По техническому заданию она должна быть: 2020-12-21."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-23 00:00:00')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_users['first_date'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_users = new_users[\n",
    "    np.logical_not(\n",
    "        new_users[\"user_id\"].isin(\n",
    "            participants[participants[\"ab_test\"] == \"interface_eu_test\"][\"user_id\"].unique()\n",
    "        )\n",
    "    )\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Даты не совпадают. Необходимо удалить всех пользователей после 2020-12-21. Но для начала процент пользователей "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.49"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(\n",
    "    (\n",
    "        new_users[new_users[\"first_date\"] > \"2020-12-21\"][\"user_id\"].nunique()\n",
    "        / new_users[\"user_id\"].nunique()\n",
    "    )\n",
    "    * 100,\n",
    "    2,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В результате удаления потеряем 8.53 процента пользователей."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "participants = participants[\n",
    "    np.logical_not(\n",
    "        participants[\"user_id\"].isin(\n",
    "            new_users[new_users[\"first_date\"] > \"2020-12-21\"][\"user_id\"].unique()\n",
    "        )\n",
    "    )\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "events = events[\n",
    "    np.logical_not(\n",
    "        events[\"user_id\"].isin(\n",
    "            new_users[new_users[\"first_date\"] > \"2020-12-21\"][\"user_id\"].unique()\n",
    "        )\n",
    "    )\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_users = new_users[new_users['first_date'] <= '2020-12-21']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Далее проверим дату остановки теста. По техническому заданию она должна быть: 2021-01-04."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-30 23:36:33')"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events['event_dt'].max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данных о покупках не достаточно. Это может повлиять на результаты теста, так как покупатели пришедшие 2020-12-21 могли не совершить такое же количество действий, как те пользователи, которые пришли позже. Но, возможно, воронка формируется раньше намечанных 14 дней и тогда это несоответствие не повлияет на результаты теста. Насколько все это могло повлиять на результат теста - мы можем оценить только уже получив результат, посмотрев, например, на мощность теста."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Далее проверим следующий пункт технического задания: \"Аудитория: 15% новых пользователей из региона EU\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "34703"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_users[new_users['region'] == 'EU']['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "ab_users = participants.merge(new_users, how='left', on='user_id')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4749"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ab_users.query('region == \"EU\" and ab_test == \"recommender_system_test\"')['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Участников теста оказалось около 6351 человек."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.14945712037765538"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ab_users.query('region == \"EU\" and ab_test == \"recommender_system_test\"')[\n",
    "    \"user_id\"\n",
    "].nunique() / df_users[df_users[\"region\"] == \"EU\"][\"user_id\"].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Доля новых пользователей из региона EU составляет 15 процентов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='19-bullet'></a>\n",
    "### Проверка времени проведения проекта."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Отфильтруем события по участникам теста"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "events_test = events[\n",
    "    events[\"user_id\"].isin(\n",
    "        participants[participants[\"ab_test\"] == \"recommender_system_test\"][\"user_id\"]\n",
    "    )\n",
    "]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Далее отфильтруем события, которые были после 14 дней с даты регистрации."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "events_test = events_test.sort_values(by=[\"user_id\", \"event_dt\"]).merge(\n",
    "    ab_users.query('region == \"EU\" and ab_test == \"recommender_system_test\"'),\n",
    "    how=\"left\",\n",
    "    on=\"user_id\",\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "events_test['lifetime'] = (\n",
    "        events_test['event_dt'] - events_test['first_date']\n",
    "    ).dt.days"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "events_test = events_test[events_test['lifetime'] <= 14]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2594"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "После фильтрации осталось 3481 пользователь из 6351. Другие пользователи оказались неактивными. Возможно, это связано с технической проблемой."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим есть ли события до или после проведения теста."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>event_dt</th>\n",
       "      <th>event_name</th>\n",
       "      <th>details</th>\n",
       "      <th>group</th>\n",
       "      <th>ab_test</th>\n",
       "      <th>first_date</th>\n",
       "      <th>region</th>\n",
       "      <th>device</th>\n",
       "      <th>lifetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [user_id, event_dt, event_name, details, group, ab_test, first_date, region, device, lifetime]\n",
       "Index: []"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test[events_test['event_dt'] < '2020-12-07']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>event_dt</th>\n",
       "      <th>event_name</th>\n",
       "      <th>details</th>\n",
       "      <th>group</th>\n",
       "      <th>ab_test</th>\n",
       "      <th>first_date</th>\n",
       "      <th>region</th>\n",
       "      <th>device</th>\n",
       "      <th>lifetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [user_id, event_dt, event_name, details, group, ab_test, first_date, region, device, lifetime]\n",
       "Index: []"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test[events_test['event_dt'] > '2021-01-04']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Далее проверим нет ли событий, на которые могли бы повлиять маркетинговые события."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-07 00:16:00')"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test['event_dt'].min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Timestamp('2020-12-29 23:38:29')"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test['event_dt'].max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>regions</th>\n",
       "      <th>start_dt</th>\n",
       "      <th>finish_dt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Christmas&amp;New Year Promo</td>\n",
       "      <td>EU, N.America</td>\n",
       "      <td>2020-12-25</td>\n",
       "      <td>2021-01-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>St. Valentine's Day Giveaway</td>\n",
       "      <td>EU, CIS, APAC, N.America</td>\n",
       "      <td>2020-02-14</td>\n",
       "      <td>2020-02-16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>St. Patric's Day Promo</td>\n",
       "      <td>EU, N.America</td>\n",
       "      <td>2020-03-17</td>\n",
       "      <td>2020-03-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Easter Promo</td>\n",
       "      <td>EU, CIS, APAC, N.America</td>\n",
       "      <td>2020-04-12</td>\n",
       "      <td>2020-04-19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4th of July Promo</td>\n",
       "      <td>N.America</td>\n",
       "      <td>2020-07-04</td>\n",
       "      <td>2020-07-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Black Friday Ads Campaign</td>\n",
       "      <td>EU, CIS, APAC, N.America</td>\n",
       "      <td>2020-11-26</td>\n",
       "      <td>2020-12-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Chinese New Year Promo</td>\n",
       "      <td>APAC</td>\n",
       "      <td>2020-01-25</td>\n",
       "      <td>2020-02-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Labor day (May 1st) Ads Campaign</td>\n",
       "      <td>EU, CIS, APAC</td>\n",
       "      <td>2020-05-01</td>\n",
       "      <td>2020-05-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>International Women's Day Promo</td>\n",
       "      <td>EU, CIS, APAC</td>\n",
       "      <td>2020-03-08</td>\n",
       "      <td>2020-03-10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Victory Day CIS (May 9th) Event</td>\n",
       "      <td>CIS</td>\n",
       "      <td>2020-05-09</td>\n",
       "      <td>2020-05-11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>CIS New Year Gift Lottery</td>\n",
       "      <td>CIS</td>\n",
       "      <td>2020-12-30</td>\n",
       "      <td>2021-01-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Dragon Boat Festival Giveaway</td>\n",
       "      <td>APAC</td>\n",
       "      <td>2020-06-25</td>\n",
       "      <td>2020-07-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Single's Day Gift Promo</td>\n",
       "      <td>APAC</td>\n",
       "      <td>2020-11-11</td>\n",
       "      <td>2020-11-12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Chinese Moon Festival</td>\n",
       "      <td>APAC</td>\n",
       "      <td>2020-10-01</td>\n",
       "      <td>2020-10-07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                name                   regions   start_dt  \\\n",
       "0           Christmas&New Year Promo             EU, N.America 2020-12-25   \n",
       "1       St. Valentine's Day Giveaway  EU, CIS, APAC, N.America 2020-02-14   \n",
       "2             St. Patric's Day Promo             EU, N.America 2020-03-17   \n",
       "3                       Easter Promo  EU, CIS, APAC, N.America 2020-04-12   \n",
       "4                  4th of July Promo                 N.America 2020-07-04   \n",
       "5          Black Friday Ads Campaign  EU, CIS, APAC, N.America 2020-11-26   \n",
       "6             Chinese New Year Promo                      APAC 2020-01-25   \n",
       "7   Labor day (May 1st) Ads Campaign             EU, CIS, APAC 2020-05-01   \n",
       "8    International Women's Day Promo             EU, CIS, APAC 2020-03-08   \n",
       "9    Victory Day CIS (May 9th) Event                       CIS 2020-05-09   \n",
       "10         CIS New Year Gift Lottery                       CIS 2020-12-30   \n",
       "11     Dragon Boat Festival Giveaway                      APAC 2020-06-25   \n",
       "12           Single's Day Gift Promo                      APAC 2020-11-11   \n",
       "13             Chinese Moon Festival                      APAC 2020-10-01   \n",
       "\n",
       "    finish_dt  \n",
       "0  2021-01-03  \n",
       "1  2020-02-16  \n",
       "2  2020-03-19  \n",
       "3  2020-04-19  \n",
       "4  2020-07-11  \n",
       "5  2020-12-01  \n",
       "6  2020-02-07  \n",
       "7  2020-05-03  \n",
       "8  2020-03-10  \n",
       "9  2020-05-11  \n",
       "10 2021-01-07  \n",
       "11 2020-07-01  \n",
       "12 2020-11-12  \n",
       "13 2020-10-07  "
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marketing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На результаты теста может повлиять `Christmas&New Year Promo`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='8-bullet'></a>\n",
    "### Проверка аудитории теста."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Удостоверимся, что у нас нет пользователей, участвоваших в двух тестах одновременно."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test[\n",
    "    events_test[\"user_id\"].isin(\n",
    "        participants[participants[\"ab_test\"] == \"interface_eu_test\"][\"user_id\"]\n",
    "    )\n",
    "]['user_id'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0 пользователей также участвовали в другом тесте. \n",
    "\n",
    "Так как пользователь участвовал в двух тестах, то нельзя точно сказать, какое именно изменение повлияло на решение о совершении действий. Необходимо исключить этих пользователей, но так как они составляют значительную часть от оставшейся выборки, то для сохранения мощности теста, оставим этих пользователей."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Далее проверим, есть ли пользователи в обеих группах теста."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "a_group = set(events_test[events_test['group']=='A']['user_id'].unique().ravel().tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "b_group = set(events_test[events_test['group']=='B']['user_id'].unique().ravel().tolist())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(b_group.intersection(a_group))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Пересечений не выявленно."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим также равномерность распределения пользователей по группам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>group</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>A</th>\n",
       "      <td>1939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B</th>\n",
       "      <td>655</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       user_id\n",
       "group         \n",
       "A         1939\n",
       "B          655"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test.groupby('group').agg({'user_id':'nunique'})"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Судя по данным, количество пользователей в группе А больше."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Исследовательский анализ данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='11-bullet'></a>\n",
    "### Распределение событий на пользователя в выборках."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "login           7694\n",
       "product_page    4794\n",
       "product_cart    2305\n",
       "purchase        2294\n",
       "Name: event_name, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test['event_name'].value_counts().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>event_dt</th>\n",
       "      <th>event_name</th>\n",
       "      <th>details</th>\n",
       "      <th>group</th>\n",
       "      <th>ab_test</th>\n",
       "      <th>first_date</th>\n",
       "      <th>region</th>\n",
       "      <th>device</th>\n",
       "      <th>lifetime</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0010A1C096941592</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4.99</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>EU</td>\n",
       "      <td>Android</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0010A1C096941592</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>product_page</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>EU</td>\n",
       "      <td>Android</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0010A1C096941592</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>login</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>EU</td>\n",
       "      <td>Android</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0010A1C096941592</td>\n",
       "      <td>2020-12-19</td>\n",
       "      <td>purchase</td>\n",
       "      <td>4.99</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>EU</td>\n",
       "      <td>Android</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0010A1C096941592</td>\n",
       "      <td>2020-12-19</td>\n",
       "      <td>login</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A</td>\n",
       "      <td>recommender_system_test</td>\n",
       "      <td>2020-12-17</td>\n",
       "      <td>EU</td>\n",
       "      <td>Android</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             user_id    event_dt    event_name  details group  \\\n",
       "6   0010A1C096941592  2020-12-17      purchase     4.99     A   \n",
       "7   0010A1C096941592  2020-12-17  product_page      NaN     A   \n",
       "8   0010A1C096941592  2020-12-17         login      NaN     A   \n",
       "9   0010A1C096941592  2020-12-19      purchase     4.99     A   \n",
       "10  0010A1C096941592  2020-12-19         login      NaN     A   \n",
       "\n",
       "                    ab_test first_date region   device  lifetime  \n",
       "6   recommender_system_test 2020-12-17     EU  Android       0.0  \n",
       "7   recommender_system_test 2020-12-17     EU  Android       0.0  \n",
       "8   recommender_system_test 2020-12-17     EU  Android       0.0  \n",
       "9   recommender_system_test 2020-12-17     EU  Android       2.0  \n",
       "10  recommender_system_test 2020-12-17     EU  Android       2.0  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Среди событий встречаются:\n",
    "* `login` - отображение логина\n",
    "* `product_page` - отображение продуктовой страницы\n",
    "* `purchase` - покупка\n",
    "* `product_cart` - отображение продуктовой карточки"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Событие `login` встречается чаще всего."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events_test[events_test['group']=='A'].groupby('user_id').agg({'event_name': 'count'\n",
    "        }).reset_index().sort_values(by='event_name',\n",
    "        ascending=False).hist(bins=25)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events_test[events_test['group']=='B'].groupby('user_id').agg({'event_name': 'count'\n",
    "        }).reset_index().sort_values(by='event_name',\n",
    "        ascending=False).hist(bins=25)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Динамика распределения событий по пользователям одинакова среди двух групп."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events_test[events_test['group']=='A'].groupby('event_name').agg({'user_id': 'nunique'\n",
    "        }).reset_index().sort_values(by='user_id',\n",
    "        ascending=False).plot(\n",
    "    x=\"event_name\",\n",
    "    y=\"user_id\",\n",
    "    kind=\"bar\",\n",
    "    title=\"Количество пользователей на каждое событие в группе А\",\n",
    "    xlabel=\"Событие\",\n",
    "    ylabel=\"Количество пользователей\",\n",
    "    figsize=[10, 6],\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events_test[events_test['group']=='B'].groupby('event_name').agg({'user_id': 'nunique'\n",
    "        }).reset_index().sort_values(by='user_id',\n",
    "        ascending=False).plot(\n",
    "    x=\"event_name\",\n",
    "    y=\"user_id\",\n",
    "    kind=\"bar\",\n",
    "    title=\"Количество пользователей на каждое событие в группе В\",\n",
    "    xlabel=\"Событие\",\n",
    "    ylabel=\"Количество пользователей\",\n",
    "    figsize=[10, 6],\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Динамика распределения пользователей по событиям одинакова среди двух групп. Однако, количество пользователей по событиям разное, что объясняется неравным распределением пользователей по группам."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='12-bullet'></a>\n",
    "### Распределение числа событий в выборках по дням."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "events_test['event_dt'] = events_test['event_dt'].dt.date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events_test[events_test['group']=='A'].groupby('event_dt').agg({'event_name': 'count'\n",
    "        }).reset_index().plot(\n",
    "    x=\"event_dt\",\n",
    "    y=\"event_name\",\n",
    "    kind=\"bar\",\n",
    "    title=\"Распределение числа событий в выборках по дням в группе А\",\n",
    "    xlabel=\"Дата\",\n",
    "    ylabel=\"Количество событий\",\n",
    "    figsize=[10, 6],\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "events_test[events_test['group']=='B'].groupby('event_dt').agg({'event_name': 'count'\n",
    "        }).reset_index().plot(\n",
    "    x=\"event_dt\",\n",
    "    y=\"event_name\",\n",
    "    kind=\"bar\",\n",
    "    title=\"Распределение числа событий в выборках по дням в группе B\",\n",
    "    xlabel=\"Дата\",\n",
    "    ylabel=\"Количество событий\",\n",
    "    figsize=[10, 6],\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='13-bullet'></a>\n",
    "### Конверсия в воронке в выборках на разных этапах."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_name</th>\n",
       "      <th>unique</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>login</td>\n",
       "      <td>1939</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>product_page</td>\n",
       "      <td>1265</td>\n",
       "      <td>0.652398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>purchase</td>\n",
       "      <td>613</td>\n",
       "      <td>0.316142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>product_cart</td>\n",
       "      <td>589</td>\n",
       "      <td>0.303765</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     event_name  unique     ratio\n",
       "0         login    1939  1.000000\n",
       "2  product_page    1265  0.652398\n",
       "3      purchase     613  0.316142\n",
       "1  product_cart     589  0.303765"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test_а = events_test[events_test['group']=='A'].groupby('event_name'\n",
    "        ).agg({'user_id': ['nunique'\n",
    "              ]}).reset_index(level='event_name')\n",
    "events_test_а.columns = ['event_name', 'unique']\n",
    "events_test_а['ratio'] = events_test_а['unique'] \\\n",
    "    / events_test[events_test['group']=='A']['user_id'].nunique()\n",
    "events_test_а = events_test_а.sort_values(by='unique',ascending=False)\n",
    "events_test_а"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>event_name</th>\n",
       "      <th>unique</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>login</td>\n",
       "      <td>1939</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>product_page</td>\n",
       "      <td>1265</td>\n",
       "      <td>0.652398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>purchase</td>\n",
       "      <td>613</td>\n",
       "      <td>0.316142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>product_cart</td>\n",
       "      <td>589</td>\n",
       "      <td>0.303765</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     event_name  unique     ratio\n",
       "0         login    1939  1.000000\n",
       "2  product_page    1265  0.652398\n",
       "3      purchase     613  0.316142\n",
       "1  product_cart     589  0.303765"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "events_test_b = events_test[events_test['group']=='B'].groupby('event_name'\n",
    "        ).agg({'user_id': ['nunique'\n",
    "              ]}).reset_index(level='event_name')\n",
    "events_test_b.columns = ['event_name', 'unique']\n",
    "events_test_b['ratio'] = events_test_а['unique'] \\\n",
    "    / events_test[events_test['group']=='B']['user_id'].nunique()\n",
    "events_test_b = events_test_а.sort_values(by='unique',ascending=False)\n",
    "events_test_b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Судя по воронке, до покупки доходит больший процент пользователей из группы А. Также можно наблюдать лучшую конверсию на всех этапах."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Вывод."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Прежде чем приступать к проведению А/В тестированию стоит учесть, что в нашем распоряжении данные о покупках не за весь период проведения А/В теста. Это привело к уменьшению выборки, так как были пользователи, у которых не прошло 14 дней с момента регистрации. Также стоит учесть, что часть пользователей оказалась неактивна, что может быть связано с системной ошибкой сбора информации о действиях пользователей. В связи с этим, у нас получилась неравномерное распределение пользователей по группам. В группе А больше участников. Однако, распределение количества событий на одного пользователя схоже в обеих группах. Также стоит отметить, что 887 пользователей участвовали сразу в двух тестах. Этот факт может повлиять на результаты теста, так как примененные на пользовователя параметры теста могут полвиять на рещультат его действий."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Оценка результатов А/В тестирования."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "order_event_name = events_test_b['event_name'].ravel().tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['login', 'product_page', 'purchase', 'product_cart']"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "order_event_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "groups = ['A','B']\n",
    "simple_funnel = {}\n",
    "for group in groups:\n",
    "    simple_funnel[group] =[]\n",
    "    for event in order_event_name:\n",
    "        simple_funnel[group].append(events_test[(events_test['group'] == group) & (events_test['event_name'] == event)]['user_id'].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'A': [1939, 1265, 613, 589], 'B': [654, 367, 191, 184]}"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simple_funnel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "simple_funnel = pd.DataFrame(simple_funnel)\n",
    "simple_funnel['event_name'] = order_event_name\n",
    "n_users = {'all': events_test['user_id'].nunique(), \n",
    "           'A': events_test[events_test['group']=='A']['user_id'].nunique(),\n",
    "           'B': events_test[events_test['group']=='B']['user_id'].nunique(),\n",
    "           }\n",
    "def stat_diff(first_group, second_group, alpha):\n",
    "    for i in simple_funnel.index:\n",
    "        alpha = alpha\n",
    "        p1 = simple_funnel[first_group][i] / n_users[first_group]\n",
    "        # пропорция успехов во второй группе:\n",
    "        p2 = simple_funnel[second_group][i] / n_users[second_group]\n",
    "        # пропорция успехов в комбинированном датасете:\n",
    "        p_combined = ((simple_funnel[first_group][i] + simple_funnel[second_group][i]) / \n",
    "                      (n_users[first_group] + n_users[second_group]))\n",
    "        # разница пропорций в датасетах\n",
    "        difference = p1 - p2\n",
    "        # считаем статистику в ст.отклонениях стандартного нормального распределения\n",
    "        z_value = difference / mth.sqrt(p_combined * (1 - p_combined) * \n",
    "                                        (1/n_users[first_group] + 1/n_users[second_group]))\n",
    "        # задаем стандартное нормальное распределение (среднее 0, ст.отклонение 1)\n",
    "        distr = st.norm(0, 1) \n",
    "        p_value = (1 - distr.cdf(abs(z_value))) * 2\n",
    "        print('{} p-значение: {}'.format(simple_funnel['event_name'][i], p_value))\n",
    "        if (p_value < alpha):\n",
    "            print(\"Отвергаем нулевую гипотезу: между долями есть значимая разница\")\n",
    "        else:\n",
    "            print(\"Не получилось отвергнуть нулевую гипотезу, нет оснований считать доли разными\")\n",
    "        print('')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "login p-значение: 0.08527159842351506\n",
      "Не получилось отвергнуть нулевую гипотезу, нет оснований считать доли разными\n",
      "\n",
      "product_page p-значение: 2.457788807452843e-05\n",
      "Отвергаем нулевую гипотезу: между долями есть значимая разница\n",
      "\n",
      "purchase p-значение: 0.24035836270660704\n",
      "Не получилось отвергнуть нулевую гипотезу, нет оснований считать доли разными\n",
      "\n",
      "product_cart p-значение: 0.26899325584838074\n",
      "Не получилось отвергнуть нулевую гипотезу, нет оснований считать доли разными\n",
      "\n"
     ]
    }
   ],
   "source": [
    "stat_diff('A', 'B', 0.05)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cтатистические критерии находят разницу в событиях `product_page`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При уровне значимости в 0.05 есть риск получить ложноположительный результат при множественной проверке гипотез. Поэтому следует понизить уровень значимости. Далее изменим уровень значимости до 0.01. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "login p-значение: 0.08527159842351506\n",
      "Не получилось отвергнуть нулевую гипотезу, нет оснований считать доли разными\n",
      "\n",
      "product_page p-значение: 2.457788807452843e-05\n",
      "Отвергаем нулевую гипотезу: между долями есть значимая разница\n",
      "\n",
      "purchase p-значение: 0.24035836270660704\n",
      "Не получилось отвергнуть нулевую гипотезу, нет оснований считать доли разными\n",
      "\n",
      "product_cart p-значение: 0.26899325584838074\n",
      "Не получилось отвергнуть нулевую гипотезу, нет оснований считать доли разными\n",
      "\n"
     ]
    }
   ],
   "source": [
    "stat_diff('A', 'B', 0.01)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "При изменении критерия значимая разница оказалась только между событиями `product_page`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Общий вывод."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В ходе исследования была проведена оценка корректности проведения А/В теста. В ходе анализа было замечено, что есть проблема большом количестве неактивных пользователей, пересечении пользователей между двумя разынми тестами, а также неполный набор данных о покупках. Что привело к неравномерной доле пользователей между двумя группами. Однако, распределение количества событий на одного пользователя оказалось схожим между двумя группами. Все эти параметры могут повлиять на результаты А/В тестирования\n",
    "\n",
    "Исходя из анализа воронки продаж, можно сделать вывод, что, в целом, конверсия на всех этапах лучше у группы А.\n",
    "\n",
    "По оценке результатов А/В тестирования можно сказать, что значимые различия в конверсии пользователей есть только между событиями `product_page`."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 1237,
    "start_time": "2022-12-19T14:27:10.738Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-19T14:30:29.808Z"
   },
   {
    "duration": 71,
    "start_time": "2022-12-19T14:31:36.314Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-19T14:31:49.733Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T14:32:03.464Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-19T14:32:05.805Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T14:32:37.758Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-19T14:33:21.958Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-19T14:33:24.543Z"
   },
   {
    "duration": 503,
    "start_time": "2022-12-19T14:34:55.970Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-19T14:35:07.809Z"
   },
   {
    "duration": 1605,
    "start_time": "2022-12-19T14:35:49.386Z"
   },
   {
    "duration": 65,
    "start_time": "2022-12-19T14:36:08.051Z"
   },
   {
    "duration": 168,
    "start_time": "2022-12-19T14:36:57.698Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-19T14:37:12.892Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-19T14:44:11.725Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-19T14:44:12.221Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-19T14:44:38.446Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-19T14:44:40.247Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-19T14:45:33.541Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-19T14:45:33.705Z"
   },
   {
    "duration": 94,
    "start_time": "2022-12-19T14:46:26.416Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-19T14:46:26.981Z"
   },
   {
    "duration": 575,
    "start_time": "2022-12-19T14:46:54.540Z"
   },
   {
    "duration": 52,
    "start_time": "2022-12-19T14:46:55.222Z"
   },
   {
    "duration": 1144,
    "start_time": "2022-12-19T14:47:25.512Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-19T14:47:26.659Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-19T14:47:26.663Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-19T14:47:26.699Z"
   },
   {
    "duration": 76,
    "start_time": "2022-12-19T14:47:26.723Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-19T14:47:26.801Z"
   },
   {
    "duration": 562,
    "start_time": "2022-12-19T14:47:26.827Z"
   },
   {
    "duration": 63,
    "start_time": "2022-12-19T14:47:27.390Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-19T14:47:27.455Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-19T14:47:27.490Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T14:51:41.309Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-19T14:51:59.210Z"
   },
   {
    "duration": 53,
    "start_time": "2022-12-19T14:52:17.672Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-19T14:53:00.291Z"
   },
   {
    "duration": 37,
    "start_time": "2022-12-19T14:53:36.800Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T14:53:59.685Z"
   },
   {
    "duration": 55,
    "start_time": "2022-12-19T14:54:42.822Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-19T14:54:49.215Z"
   },
   {
    "duration": 44,
    "start_time": "2022-12-19T14:54:54.031Z"
   },
   {
    "duration": 67,
    "start_time": "2022-12-19T14:55:09.402Z"
   },
   {
    "duration": 51,
    "start_time": "2022-12-19T14:55:12.252Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T14:57:01.345Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T14:58:00.999Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-19T14:58:26.447Z"
   },
   {
    "duration": 184,
    "start_time": "2022-12-19T14:58:41.118Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T14:58:55.689Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T15:00:34.827Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T15:01:23.058Z"
   },
   {
    "duration": 1278,
    "start_time": "2022-12-19T15:02:25.801Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T15:02:30.326Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T15:02:48.407Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-19T15:03:26.402Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T15:03:48.583Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T17:45:34.813Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T17:46:27.574Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T17:47:53.603Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T17:50:10.553Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T17:50:39.473Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T17:50:42.212Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-19T17:58:30.777Z"
   },
   {
    "duration": 1389,
    "start_time": "2022-12-19T18:01:05.364Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T18:01:06.755Z"
   },
   {
    "duration": 75,
    "start_time": "2022-12-19T18:01:06.760Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-19T18:01:06.836Z"
   },
   {
    "duration": 193,
    "start_time": "2022-12-19T18:01:06.862Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-19T18:01:07.057Z"
   },
   {
    "duration": 694,
    "start_time": "2022-12-19T18:01:07.082Z"
   },
   {
    "duration": 50,
    "start_time": "2022-12-19T18:01:07.778Z"
   },
   {
    "duration": 83,
    "start_time": "2022-12-19T18:01:07.829Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-19T18:01:07.915Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-19T18:01:07.935Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-19T18:01:07.948Z"
   },
   {
    "duration": 55,
    "start_time": "2022-12-19T18:01:07.967Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T18:01:08.024Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T18:01:08.036Z"
   },
   {
    "duration": 40,
    "start_time": "2022-12-19T18:01:08.047Z"
   },
   {
    "duration": 209,
    "start_time": "2022-12-19T18:01:08.111Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-19T18:01:08.322Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:01:08.335Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T18:01:08.342Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T18:01:08.353Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-19T18:01:08.364Z"
   },
   {
    "duration": 54,
    "start_time": "2022-12-19T18:01:08.384Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-19T18:01:08.440Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:01:08.456Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T18:01:08.465Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:01:08.476Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-19T18:01:08.488Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-19T18:01:58.256Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:02:14.296Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:06:10.012Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T18:06:31.496Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T18:06:41.615Z"
   },
   {
    "duration": 1028,
    "start_time": "2022-12-19T18:07:53.960Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-19T18:07:54.990Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T18:07:54.995Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-19T18:07:55.033Z"
   },
   {
    "duration": 77,
    "start_time": "2022-12-19T18:07:55.060Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-19T18:07:55.138Z"
   },
   {
    "duration": 564,
    "start_time": "2022-12-19T18:07:55.163Z"
   },
   {
    "duration": 72,
    "start_time": "2022-12-19T18:07:55.729Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-19T18:07:55.812Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-19T18:07:55.841Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:07:55.860Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-19T18:07:55.869Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-19T18:07:55.887Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:07:55.939Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:07:55.948Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-19T18:07:55.957Z"
   },
   {
    "duration": 215,
    "start_time": "2022-12-19T18:07:55.989Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-19T18:07:56.207Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T18:07:56.220Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T18:07:56.226Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-19T18:07:56.234Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-19T18:07:56.247Z"
   },
   {
    "duration": 53,
    "start_time": "2022-12-19T18:07:56.260Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:07:56.315Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T18:07:56.322Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:07:56.333Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-19T18:07:56.354Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-19T18:07:56.370Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:07:56.406Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:07:56.415Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:07:56.425Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:07:56.434Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-19T18:07:56.440Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:10:13.847Z"
   },
   {
    "duration": 1112,
    "start_time": "2022-12-19T18:14:11.948Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-19T18:14:13.062Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-19T18:14:13.067Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-19T18:14:13.103Z"
   },
   {
    "duration": 78,
    "start_time": "2022-12-19T18:14:13.127Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-19T18:14:13.207Z"
   },
   {
    "duration": 600,
    "start_time": "2022-12-19T18:14:13.236Z"
   },
   {
    "duration": 49,
    "start_time": "2022-12-19T18:14:13.838Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-19T18:14:13.889Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-19T18:14:13.925Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:14:13.945Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-19T18:14:13.951Z"
   },
   {
    "duration": 66,
    "start_time": "2022-12-19T18:14:13.967Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:14:14.035Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:14:14.044Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-19T18:14:14.053Z"
   },
   {
    "duration": 213,
    "start_time": "2022-12-19T18:14:14.084Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:14:14.298Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:14:14.319Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:14:14.325Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-19T18:14:14.334Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:14:14.346Z"
   },
   {
    "duration": 58,
    "start_time": "2022-12-19T18:14:14.355Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:14:14.415Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T18:14:14.421Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:14:14.428Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T18:14:14.437Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-19T18:14:14.444Z"
   },
   {
    "duration": 45,
    "start_time": "2022-12-19T18:14:14.476Z"
   },
   {
    "duration": 72,
    "start_time": "2022-12-19T18:14:14.523Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-19T18:14:14.597Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:14:14.618Z"
   },
   {
    "duration": 1241,
    "start_time": "2022-12-19T18:20:35.752Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T18:20:36.996Z"
   },
   {
    "duration": 87,
    "start_time": "2022-12-19T18:20:37.002Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-19T18:20:37.091Z"
   },
   {
    "duration": 157,
    "start_time": "2022-12-19T18:20:37.122Z"
   },
   {
    "duration": 60,
    "start_time": "2022-12-19T18:20:37.282Z"
   },
   {
    "duration": 674,
    "start_time": "2022-12-19T18:20:37.348Z"
   },
   {
    "duration": 58,
    "start_time": "2022-12-19T18:20:38.031Z"
   },
   {
    "duration": 68,
    "start_time": "2022-12-19T18:20:38.091Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-19T18:20:38.161Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-19T18:20:38.184Z"
   },
   {
    "duration": 54,
    "start_time": "2022-12-19T18:20:38.210Z"
   },
   {
    "duration": 78,
    "start_time": "2022-12-19T18:20:38.266Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T18:20:38.347Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-19T18:20:38.359Z"
   },
   {
    "duration": 100,
    "start_time": "2022-12-19T18:20:38.385Z"
   },
   {
    "duration": 241,
    "start_time": "2022-12-19T18:20:38.487Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-19T18:20:38.730Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-19T18:20:38.756Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-19T18:20:38.776Z"
   },
   {
    "duration": 53,
    "start_time": "2022-12-19T18:20:38.801Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-19T18:20:38.856Z"
   },
   {
    "duration": 64,
    "start_time": "2022-12-19T18:20:38.876Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-19T18:20:38.945Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-19T18:20:38.987Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T18:20:39.015Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-19T18:20:39.053Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-19T18:20:39.075Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T18:20:39.117Z"
   },
   {
    "duration": 88,
    "start_time": "2022-12-19T18:20:39.155Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T18:20:39.247Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-19T18:20:39.257Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-19T18:21:48.507Z"
   },
   {
    "duration": 49,
    "start_time": "2022-12-19T18:22:57.844Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:23:22.839Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:23:29.945Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-19T18:24:22.448Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-19T18:24:28.666Z"
   },
   {
    "duration": 38,
    "start_time": "2022-12-19T18:25:24.067Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-19T18:31:42.347Z"
   },
   {
    "duration": 49,
    "start_time": "2022-12-19T18:35:11.501Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-19T18:35:13.008Z"
   },
   {
    "duration": 1145,
    "start_time": "2022-12-19T18:36:05.041Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-19T18:36:06.188Z"
   },
   {
    "duration": 56,
    "start_time": "2022-12-19T18:36:06.192Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-19T18:36:06.250Z"
   },
   {
    "duration": 85,
    "start_time": "2022-12-19T18:36:06.275Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-19T18:36:06.362Z"
   },
   {
    "duration": 718,
    "start_time": "2022-12-19T18:36:06.388Z"
   },
   {
    "duration": 64,
    "start_time": "2022-12-19T18:36:07.107Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-19T18:36:07.173Z"
   },
   {
    "duration": 42,
    "start_time": "2022-12-19T18:36:07.203Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-19T18:36:07.247Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:36:07.270Z"
   },
   {
    "duration": 56,
    "start_time": "2022-12-19T18:36:07.292Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:36:07.351Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:36:07.360Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-19T18:36:07.370Z"
   },
   {
    "duration": 222,
    "start_time": "2022-12-19T18:36:07.423Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T18:36:07.646Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-19T18:36:07.658Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T18:36:07.672Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-19T18:36:07.683Z"
   },
   {
    "duration": 38,
    "start_time": "2022-12-19T18:36:07.725Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-19T18:36:07.765Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-19T18:36:07.817Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-19T18:36:07.850Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-19T18:36:07.870Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-19T18:36:07.886Z"
   },
   {
    "duration": 61,
    "start_time": "2022-12-19T18:36:07.903Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T18:36:07.966Z"
   },
   {
    "duration": 73,
    "start_time": "2022-12-19T18:36:07.976Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T18:36:08.051Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:36:08.058Z"
   },
   {
    "duration": 50,
    "start_time": "2022-12-19T18:36:08.067Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:36:08.126Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T18:36:08.148Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T18:36:08.186Z"
   },
   {
    "duration": 1103,
    "start_time": "2022-12-19T18:42:20.552Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-19T18:42:21.657Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T18:42:21.662Z"
   },
   {
    "duration": 40,
    "start_time": "2022-12-19T18:42:21.700Z"
   },
   {
    "duration": 101,
    "start_time": "2022-12-19T18:42:21.744Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-19T18:42:21.847Z"
   },
   {
    "duration": 617,
    "start_time": "2022-12-19T18:42:21.871Z"
   },
   {
    "duration": 63,
    "start_time": "2022-12-19T18:42:22.490Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-19T18:42:22.554Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:42:22.583Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:42:22.616Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-19T18:42:22.624Z"
   },
   {
    "duration": 46,
    "start_time": "2022-12-19T18:42:22.647Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-19T18:42:22.696Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-19T18:42:22.705Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T18:42:22.748Z"
   },
   {
    "duration": 245,
    "start_time": "2022-12-19T18:42:22.786Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-19T18:42:23.032Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-19T18:42:23.048Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:42:23.058Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-19T18:42:23.068Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-19T18:42:23.090Z"
   },
   {
    "duration": 40,
    "start_time": "2022-12-19T18:42:23.105Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T18:42:23.147Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-19T18:42:23.157Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-19T18:42:23.165Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T18:42:23.180Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-19T18:42:23.187Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-19T18:42:23.230Z"
   },
   {
    "duration": 76,
    "start_time": "2022-12-19T18:42:23.246Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-19T18:42:23.324Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-19T18:42:23.338Z"
   },
   {
    "duration": 52,
    "start_time": "2022-12-19T21:59:17.742Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-19T21:59:22.856Z"
   },
   {
    "duration": 1369,
    "start_time": "2022-12-19T21:59:31.149Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-19T21:59:32.520Z"
   },
   {
    "duration": 113,
    "start_time": "2022-12-19T21:59:32.526Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-19T21:59:32.645Z"
   },
   {
    "duration": 469,
    "start_time": "2022-12-19T21:59:32.670Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-19T21:59:33.142Z"
   },
   {
    "duration": 909,
    "start_time": "2022-12-19T21:59:33.168Z"
   },
   {
    "duration": 62,
    "start_time": "2022-12-19T21:59:34.078Z"
   },
   {
    "duration": 117,
    "start_time": "2022-12-19T21:59:34.141Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-19T21:59:34.260Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-19T21:59:34.277Z"
   },
   {
    "duration": 58,
    "start_time": "2022-12-19T21:59:34.291Z"
   },
   {
    "duration": 56,
    "start_time": "2022-12-19T21:59:34.351Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-19T21:59:34.408Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-19T21:59:34.425Z"
   },
   {
    "duration": 65,
    "start_time": "2022-12-19T21:59:34.452Z"
   },
   {
    "duration": 209,
    "start_time": "2022-12-19T21:59:34.528Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-19T21:59:34.742Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-19T21:59:34.756Z"
   },
   {
    "duration": 54,
    "start_time": "2022-12-19T21:59:34.777Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-19T21:59:34.833Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-19T21:59:34.851Z"
   },
   {
    "duration": 37,
    "start_time": "2022-12-19T21:59:34.867Z"
   },
   {
    "duration": 51,
    "start_time": "2022-12-19T21:59:34.910Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T21:59:34.963Z"
   },
   {
    "duration": 59,
    "start_time": "2022-12-19T21:59:34.973Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-19T21:59:35.035Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-19T21:59:35.047Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-19T21:59:35.077Z"
   },
   {
    "duration": 135,
    "start_time": "2022-12-19T21:59:35.087Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-19T21:59:35.226Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-19T21:59:35.249Z"
   },
   {
    "duration": 56,
    "start_time": "2022-12-19T21:59:35.263Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-19T21:59:51.092Z"
   },
   {
    "duration": 63,
    "start_time": "2022-12-19T22:07:32.592Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-19T22:07:52.771Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-19T22:08:20.148Z"
   },
   {
    "duration": 44,
    "start_time": "2022-12-19T22:08:34.090Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-19T22:08:34.777Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-19T22:08:41.067Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-19T22:08:41.672Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-19T22:09:10.553Z"
   },
   {
    "duration": 116,
    "start_time": "2022-12-19T22:10:32.196Z"
   },
   {
    "duration": 303,
    "start_time": "2022-12-19T22:10:51.569Z"
   },
   {
    "duration": 75,
    "start_time": "2022-12-19T22:11:18.884Z"
   },
   {
    "duration": 56,
    "start_time": "2022-12-19T22:11:26.633Z"
   },
   {
    "duration": 39,
    "start_time": "2022-12-19T22:11:43.894Z"
   },
   {
    "duration": 360,
    "start_time": "2022-12-19T22:11:56.426Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-19T22:13:02.525Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-19T22:13:24.482Z"
   },
   {
    "duration": 45,
    "start_time": "2022-12-19T22:19:01.519Z"
   },
   {
    "duration": 57,
    "start_time": "2022-12-20T00:40:38.808Z"
   },
   {
    "duration": 1200,
    "start_time": "2022-12-20T00:40:43.816Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T00:40:45.018Z"
   },
   {
    "duration": 81,
    "start_time": "2022-12-20T00:40:45.023Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T00:40:45.106Z"
   },
   {
    "duration": 320,
    "start_time": "2022-12-20T00:40:45.128Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-20T00:40:45.450Z"
   },
   {
    "duration": 661,
    "start_time": "2022-12-20T00:40:45.475Z"
   },
   {
    "duration": 50,
    "start_time": "2022-12-20T00:40:46.138Z"
   },
   {
    "duration": 82,
    "start_time": "2022-12-20T00:40:46.190Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-20T00:40:46.276Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T00:40:46.303Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-20T00:40:46.317Z"
   },
   {
    "duration": 54,
    "start_time": "2022-12-20T00:40:46.342Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T00:40:46.398Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T00:40:46.420Z"
   },
   {
    "duration": 52,
    "start_time": "2022-12-20T00:40:46.438Z"
   },
   {
    "duration": 174,
    "start_time": "2022-12-20T00:40:46.492Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T00:40:46.667Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T00:40:46.679Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T00:40:46.686Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T00:40:46.697Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T00:40:46.719Z"
   },
   {
    "duration": 35,
    "start_time": "2022-12-20T00:40:46.734Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:40:46.771Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T00:40:46.778Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:40:46.791Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:40:46.816Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T00:40:46.825Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T00:40:46.853Z"
   },
   {
    "duration": 82,
    "start_time": "2022-12-20T00:40:46.864Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:40:46.947Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T00:40:46.955Z"
   },
   {
    "duration": 37,
    "start_time": "2022-12-20T00:40:46.976Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-20T00:40:47.015Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T00:40:47.047Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T00:40:47.071Z"
   },
   {
    "duration": 54,
    "start_time": "2022-12-20T00:40:47.094Z"
   },
   {
    "duration": 1078,
    "start_time": "2022-12-20T00:41:14.720Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T00:41:15.800Z"
   },
   {
    "duration": 38,
    "start_time": "2022-12-20T00:41:15.805Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T00:41:15.845Z"
   },
   {
    "duration": 72,
    "start_time": "2022-12-20T00:41:15.867Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-20T00:41:15.940Z"
   },
   {
    "duration": 539,
    "start_time": "2022-12-20T00:41:15.965Z"
   },
   {
    "duration": 53,
    "start_time": "2022-12-20T00:41:16.505Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T00:41:16.559Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T00:41:16.587Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T00:41:16.617Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T00:41:16.623Z"
   },
   {
    "duration": 38,
    "start_time": "2022-12-20T00:41:16.639Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T00:41:16.680Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-20T00:41:16.690Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T00:41:16.721Z"
   },
   {
    "duration": 187,
    "start_time": "2022-12-20T00:41:16.750Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T00:41:16.939Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T00:41:16.949Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-20T00:41:16.954Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T00:41:16.971Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:41:16.984Z"
   },
   {
    "duration": 42,
    "start_time": "2022-12-20T00:41:16.992Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:41:17.036Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T00:41:17.044Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:41:17.050Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T00:41:17.058Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T00:41:17.072Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T00:41:17.095Z"
   },
   {
    "duration": 56,
    "start_time": "2022-12-20T00:41:17.124Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:41:17.182Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T00:41:17.190Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T00:41:17.219Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-20T00:41:17.241Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T00:41:17.273Z"
   },
   {
    "duration": 49,
    "start_time": "2022-12-20T00:41:17.285Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-20T00:41:17.335Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-20T00:41:30.657Z"
   },
   {
    "duration": 1042,
    "start_time": "2022-12-20T00:42:45.451Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T00:42:46.494Z"
   },
   {
    "duration": 35,
    "start_time": "2022-12-20T00:42:46.499Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T00:42:46.536Z"
   },
   {
    "duration": 71,
    "start_time": "2022-12-20T00:42:46.556Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T00:42:46.629Z"
   },
   {
    "duration": 507,
    "start_time": "2022-12-20T00:42:46.651Z"
   },
   {
    "duration": 60,
    "start_time": "2022-12-20T00:42:47.160Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-20T00:42:47.221Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T00:42:47.257Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T00:42:47.277Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T00:42:47.286Z"
   },
   {
    "duration": 38,
    "start_time": "2022-12-20T00:42:47.315Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T00:42:47.354Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T00:42:47.363Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-20T00:42:47.371Z"
   },
   {
    "duration": 168,
    "start_time": "2022-12-20T00:42:47.416Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T00:42:47.585Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T00:42:47.596Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T00:42:47.615Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T00:42:47.620Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-20T00:42:47.635Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-20T00:42:47.651Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T00:42:47.683Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:42:47.689Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T00:42:47.696Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T00:42:47.717Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T00:42:47.724Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T00:42:47.745Z"
   },
   {
    "duration": 114,
    "start_time": "2022-12-20T00:42:47.756Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:42:47.872Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T00:42:47.880Z"
   },
   {
    "duration": 42,
    "start_time": "2022-12-20T00:42:47.889Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-20T00:42:47.932Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T00:42:47.963Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-20T00:42:47.976Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T00:42:48.018Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T00:42:48.047Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T00:42:48.058Z"
   },
   {
    "duration": 445,
    "start_time": "2022-12-20T00:56:01.379Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T00:56:08.383Z"
   },
   {
    "duration": 452,
    "start_time": "2022-12-20T00:56:43.779Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T00:56:47.609Z"
   },
   {
    "duration": 453,
    "start_time": "2022-12-20T00:57:12.328Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T00:57:13.668Z"
   },
   {
    "duration": 423,
    "start_time": "2022-12-20T00:57:44.484Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T00:57:45.307Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-20T00:58:27.687Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-20T00:58:39.212Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T00:58:45.371Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T00:58:46.256Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-20T00:58:55.696Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T00:59:39.492Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T00:59:48.221Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:01:29.713Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-20T01:01:36.667Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T01:12:30.460Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T01:14:15.201Z"
   },
   {
    "duration": 98,
    "start_time": "2022-12-20T01:14:58.931Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T01:15:39.469Z"
   },
   {
    "duration": 57,
    "start_time": "2022-12-20T01:16:53.354Z"
   },
   {
    "duration": 40,
    "start_time": "2022-12-20T01:16:57.404Z"
   },
   {
    "duration": 45,
    "start_time": "2022-12-20T01:19:05.428Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T01:23:13.853Z"
   },
   {
    "duration": 44,
    "start_time": "2022-12-20T01:23:34.964Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:24:13.372Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-20T01:24:29.929Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:24:49.462Z"
   },
   {
    "duration": 1039,
    "start_time": "2022-12-20T01:25:08.644Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T01:25:09.684Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-20T01:25:09.688Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T01:25:09.738Z"
   },
   {
    "duration": 90,
    "start_time": "2022-12-20T01:25:09.759Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T01:25:09.851Z"
   },
   {
    "duration": 585,
    "start_time": "2022-12-20T01:25:09.877Z"
   },
   {
    "duration": 59,
    "start_time": "2022-12-20T01:25:10.463Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-20T01:25:10.533Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-20T01:25:10.564Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T01:25:10.582Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T01:25:10.588Z"
   },
   {
    "duration": 62,
    "start_time": "2022-12-20T01:25:10.603Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:25:10.667Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:25:10.676Z"
   },
   {
    "duration": 65,
    "start_time": "2022-12-20T01:25:10.686Z"
   },
   {
    "duration": 222,
    "start_time": "2022-12-20T01:25:10.753Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:25:10.977Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T01:25:10.988Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T01:25:10.995Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-20T01:25:11.023Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:25:11.048Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T01:25:11.057Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T01:25:11.085Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T01:25:11.091Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T01:25:11.099Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T01:25:11.120Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-20T01:25:11.136Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:25:11.170Z"
   },
   {
    "duration": 83,
    "start_time": "2022-12-20T01:25:11.180Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T01:25:11.264Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T01:25:11.273Z"
   },
   {
    "duration": 52,
    "start_time": "2022-12-20T01:25:11.282Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-20T01:25:11.337Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T01:25:11.369Z"
   },
   {
    "duration": 46,
    "start_time": "2022-12-20T01:25:11.383Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-20T01:25:11.431Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-20T01:25:11.462Z"
   },
   {
    "duration": 55,
    "start_time": "2022-12-20T01:25:11.494Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T01:25:11.550Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-20T01:25:11.565Z"
   },
   {
    "duration": 40,
    "start_time": "2022-12-20T01:25:11.592Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T01:25:11.635Z"
   },
   {
    "duration": 909,
    "start_time": "2022-12-20T01:25:11.649Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T01:25:25.889Z"
   },
   {
    "duration": 45,
    "start_time": "2022-12-20T01:26:43.532Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:26:48.098Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:26:55.830Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-20T01:27:02.866Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T01:27:45.724Z"
   },
   {
    "duration": 1123,
    "start_time": "2022-12-20T01:28:03.137Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T01:28:04.262Z"
   },
   {
    "duration": 44,
    "start_time": "2022-12-20T01:28:04.268Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-20T01:28:04.315Z"
   },
   {
    "duration": 78,
    "start_time": "2022-12-20T01:28:04.342Z"
   },
   {
    "duration": 35,
    "start_time": "2022-12-20T01:28:04.422Z"
   },
   {
    "duration": 562,
    "start_time": "2022-12-20T01:28:04.459Z"
   },
   {
    "duration": 51,
    "start_time": "2022-12-20T01:28:05.023Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T01:28:05.075Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T01:28:05.115Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:28:05.138Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-20T01:28:05.149Z"
   },
   {
    "duration": 61,
    "start_time": "2022-12-20T01:28:05.167Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:28:05.229Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-20T01:28:05.238Z"
   },
   {
    "duration": 37,
    "start_time": "2022-12-20T01:28:05.256Z"
   },
   {
    "duration": 210,
    "start_time": "2022-12-20T01:28:05.294Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T01:28:05.506Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T01:28:05.522Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T01:28:05.538Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T01:28:05.547Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:28:05.566Z"
   },
   {
    "duration": 43,
    "start_time": "2022-12-20T01:28:05.577Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T01:28:05.621Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T01:28:05.628Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T01:28:05.637Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T01:28:05.658Z"
   },
   {
    "duration": 46,
    "start_time": "2022-12-20T01:28:05.688Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T01:28:05.736Z"
   },
   {
    "duration": 81,
    "start_time": "2022-12-20T01:28:05.749Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T01:28:05.832Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-20T01:28:05.846Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T01:28:05.863Z"
   },
   {
    "duration": 45,
    "start_time": "2022-12-20T01:28:05.886Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T01:28:05.933Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T01:28:05.946Z"
   },
   {
    "duration": 83,
    "start_time": "2022-12-20T01:28:05.976Z"
   },
   {
    "duration": 43,
    "start_time": "2022-12-20T01:28:06.061Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T01:28:06.106Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T01:28:06.113Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T01:28:06.136Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-20T01:28:06.149Z"
   },
   {
    "duration": 60,
    "start_time": "2022-12-20T01:28:06.180Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-20T01:28:06.242Z"
   },
   {
    "duration": 40,
    "start_time": "2022-12-20T01:28:06.259Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T01:28:06.301Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T01:28:06.330Z"
   },
   {
    "duration": 799,
    "start_time": "2022-12-20T01:28:06.358Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-20T01:29:24.782Z"
   },
   {
    "duration": 1027,
    "start_time": "2022-12-20T01:30:40.440Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T01:30:41.471Z"
   },
   {
    "duration": 37,
    "start_time": "2022-12-20T01:30:41.476Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T01:30:41.516Z"
   },
   {
    "duration": 77,
    "start_time": "2022-12-20T01:30:41.545Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-20T01:30:41.624Z"
   },
   {
    "duration": 572,
    "start_time": "2022-12-20T01:30:41.649Z"
   },
   {
    "duration": 53,
    "start_time": "2022-12-20T01:30:42.222Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-20T01:30:42.277Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T01:30:42.315Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T01:30:42.336Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T01:30:42.345Z"
   },
   {
    "duration": 67,
    "start_time": "2022-12-20T01:30:42.364Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T01:30:42.433Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:30:42.446Z"
   },
   {
    "duration": 60,
    "start_time": "2022-12-20T01:30:42.456Z"
   },
   {
    "duration": 204,
    "start_time": "2022-12-20T01:30:42.518Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T01:30:42.723Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T01:30:42.735Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T01:30:42.741Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T01:30:42.756Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:30:42.783Z"
   },
   {
    "duration": 40,
    "start_time": "2022-12-20T01:30:42.794Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:30:42.836Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T01:30:42.848Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:30:42.870Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:30:42.881Z"
   },
   {
    "duration": 43,
    "start_time": "2022-12-20T01:30:42.895Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:30:42.940Z"
   },
   {
    "duration": 74,
    "start_time": "2022-12-20T01:30:42.949Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T01:30:43.024Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T01:30:43.031Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T01:30:43.049Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-20T01:30:43.078Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T01:30:43.121Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T01:30:43.134Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T01:30:43.158Z"
   },
   {
    "duration": 57,
    "start_time": "2022-12-20T01:30:43.187Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T01:30:43.246Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:30:43.254Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-20T01:30:43.265Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:34:02.881Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:34:33.007Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:35:40.797Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T01:38:30.225Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:38:55.155Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T01:39:15.580Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T01:39:51.925Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T01:39:56.808Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T01:40:52.889Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T01:41:35.439Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T01:41:46.463Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T01:41:53.853Z"
   },
   {
    "duration": 99,
    "start_time": "2022-12-20T01:45:44.532Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T01:45:52.298Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T01:53:48.649Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T01:54:15.357Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-20T01:54:32.064Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T02:04:39.982Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T03:07:37.326Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T03:21:29.838Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-20T03:21:35.079Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T03:21:57.399Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T03:22:25.227Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T03:26:29.557Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T03:39:24.600Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T03:39:32.349Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T03:44:21.376Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T03:44:40.816Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T03:44:52.101Z"
   },
   {
    "duration": 165,
    "start_time": "2022-12-20T03:47:31.747Z"
   },
   {
    "duration": 152,
    "start_time": "2022-12-20T03:47:50.941Z"
   },
   {
    "duration": 146,
    "start_time": "2022-12-20T03:48:01.104Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T03:51:08.260Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-20T03:51:33.276Z"
   },
   {
    "duration": 155,
    "start_time": "2022-12-20T03:52:40.070Z"
   },
   {
    "duration": 175,
    "start_time": "2022-12-20T03:52:56.264Z"
   },
   {
    "duration": 137,
    "start_time": "2022-12-20T03:53:09.385Z"
   },
   {
    "duration": 141,
    "start_time": "2022-12-20T03:53:48.728Z"
   },
   {
    "duration": 165,
    "start_time": "2022-12-20T03:53:51.231Z"
   },
   {
    "duration": 136,
    "start_time": "2022-12-20T03:54:21.313Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T03:59:58.892Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:00:23.468Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T04:00:27.647Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T04:00:35.322Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-20T04:01:37.899Z"
   },
   {
    "duration": 419,
    "start_time": "2022-12-20T04:01:56.018Z"
   },
   {
    "duration": 241,
    "start_time": "2022-12-20T04:02:19.108Z"
   },
   {
    "duration": 168,
    "start_time": "2022-12-20T04:02:32.042Z"
   },
   {
    "duration": 124,
    "start_time": "2022-12-20T04:02:39.406Z"
   },
   {
    "duration": 167,
    "start_time": "2022-12-20T04:03:00.073Z"
   },
   {
    "duration": 151,
    "start_time": "2022-12-20T04:03:10.957Z"
   },
   {
    "duration": 273,
    "start_time": "2022-12-20T04:03:38.554Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T04:09:49.447Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T04:10:07.536Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T04:31:04.633Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T04:31:38.889Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T04:31:45.430Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T04:32:17.035Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T04:32:19.930Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T04:36:49.116Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-20T04:37:04.139Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T04:37:16.576Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T04:40:12.205Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T04:40:42.879Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T04:41:24.545Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:41:31.051Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:43:49.713Z"
   },
   {
    "duration": 1090,
    "start_time": "2022-12-20T04:54:09.644Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T04:54:10.736Z"
   },
   {
    "duration": 35,
    "start_time": "2022-12-20T04:54:10.740Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T04:54:10.777Z"
   },
   {
    "duration": 78,
    "start_time": "2022-12-20T04:54:10.799Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T04:54:10.879Z"
   },
   {
    "duration": 525,
    "start_time": "2022-12-20T04:54:10.903Z"
   },
   {
    "duration": 52,
    "start_time": "2022-12-20T04:54:11.429Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T04:54:11.483Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T04:54:11.511Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T04:54:11.539Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T04:54:11.546Z"
   },
   {
    "duration": 39,
    "start_time": "2022-12-20T04:54:11.559Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T04:54:11.622Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:54:11.633Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T04:54:11.642Z"
   },
   {
    "duration": 185,
    "start_time": "2022-12-20T04:54:11.671Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T04:54:11.858Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T04:54:11.868Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:54:11.879Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T04:54:11.889Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T04:54:11.898Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-20T04:54:11.918Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T04:54:11.949Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T04:54:11.954Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T04:54:11.961Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T04:54:11.969Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-20T04:54:11.980Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:54:12.030Z"
   },
   {
    "duration": 88,
    "start_time": "2022-12-20T04:54:12.039Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T04:54:12.130Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-20T04:54:12.139Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T04:54:12.156Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T04:54:12.177Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T04:54:12.205Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T04:54:12.233Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T04:54:12.257Z"
   },
   {
    "duration": 45,
    "start_time": "2022-12-20T04:54:12.286Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T04:54:12.333Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T04:54:12.339Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T04:54:12.357Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:54:12.366Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T04:54:12.375Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T04:54:12.387Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-20T04:54:12.395Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T04:54:12.429Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T04:54:12.448Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T04:54:12.461Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T04:54:12.474Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T04:54:12.482Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T04:54:12.495Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:54:12.524Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T04:54:12.534Z"
   },
   {
    "duration": 178,
    "start_time": "2022-12-20T04:54:12.556Z"
   },
   {
    "duration": 151,
    "start_time": "2022-12-20T04:54:12.736Z"
   },
   {
    "duration": 159,
    "start_time": "2022-12-20T04:54:12.889Z"
   },
   {
    "duration": 149,
    "start_time": "2022-12-20T04:54:13.049Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T04:54:13.199Z"
   },
   {
    "duration": 247,
    "start_time": "2022-12-20T04:54:13.228Z"
   },
   {
    "duration": 268,
    "start_time": "2022-12-20T04:54:13.477Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T04:54:13.746Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T04:54:13.775Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-20T04:54:13.795Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T04:54:13.829Z"
   },
   {
    "duration": 36,
    "start_time": "2022-12-20T04:54:13.838Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T04:54:13.876Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T04:54:13.881Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T04:54:13.918Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-20T04:54:13.931Z"
   },
   {
    "duration": 1270,
    "start_time": "2022-12-20T20:49:31.693Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T20:49:32.965Z"
   },
   {
    "duration": 73,
    "start_time": "2022-12-20T20:49:32.970Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T20:49:33.045Z"
   },
   {
    "duration": 186,
    "start_time": "2022-12-20T20:49:33.072Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T20:49:33.259Z"
   },
   {
    "duration": 667,
    "start_time": "2022-12-20T20:49:33.285Z"
   },
   {
    "duration": 50,
    "start_time": "2022-12-20T20:49:33.954Z"
   },
   {
    "duration": 77,
    "start_time": "2022-12-20T20:49:34.006Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-20T20:49:34.085Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T20:49:34.104Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T20:49:34.118Z"
   },
   {
    "duration": 38,
    "start_time": "2022-12-20T20:49:34.133Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-20T20:49:34.173Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T20:49:34.198Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-20T20:49:34.205Z"
   },
   {
    "duration": 201,
    "start_time": "2022-12-20T20:49:34.236Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T20:49:34.439Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T20:49:34.451Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-20T20:49:34.458Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-20T20:49:34.464Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T20:49:34.499Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-20T20:49:34.507Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T20:49:34.536Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T20:49:34.558Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T20:49:34.566Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T20:49:34.594Z"
   },
   {
    "duration": 48,
    "start_time": "2022-12-20T20:49:34.609Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-20T20:49:34.659Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:34.677Z"
   },
   {
    "duration": 82,
    "start_time": "2022-12-20T20:49:34.687Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-20T20:49:34.770Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T20:49:34.777Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-20T20:49:34.786Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-20T20:49:34.803Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-20T20:49:34.831Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-20T20:49:34.844Z"
   },
   {
    "duration": 50,
    "start_time": "2022-12-20T20:49:34.868Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-20T20:49:34.920Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T20:49:34.955Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-20T20:49:34.966Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:34.998Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T20:49:35.009Z"
   },
   {
    "duration": 30,
    "start_time": "2022-12-20T20:49:35.023Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-20T20:49:35.054Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:35.080Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-20T20:49:35.090Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-20T20:49:35.109Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:35.124Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:35.135Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T20:49:35.146Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-20T20:49:35.154Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-20T20:49:35.195Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-20T20:49:35.205Z"
   },
   {
    "duration": 192,
    "start_time": "2022-12-20T20:49:35.227Z"
   },
   {
    "duration": 162,
    "start_time": "2022-12-20T20:49:35.421Z"
   },
   {
    "duration": 179,
    "start_time": "2022-12-20T20:49:35.584Z"
   },
   {
    "duration": 172,
    "start_time": "2022-12-20T20:49:35.764Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:35.938Z"
   },
   {
    "duration": 298,
    "start_time": "2022-12-20T20:49:35.949Z"
   },
   {
    "duration": 343,
    "start_time": "2022-12-20T20:49:36.249Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-20T20:49:36.594Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-20T20:49:36.622Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-20T20:49:36.642Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-20T20:49:36.646Z"
   },
   {
    "duration": 54,
    "start_time": "2022-12-20T20:49:36.654Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-20T20:49:36.709Z"
   },
   {
    "duration": 20,
    "start_time": "2022-12-20T20:49:36.715Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:36.736Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-20T20:49:36.746Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-20T20:50:09.807Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
