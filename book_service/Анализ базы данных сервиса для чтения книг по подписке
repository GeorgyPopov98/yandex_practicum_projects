{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Анализ базы данных сервиса для чтения книг по подписке."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В эпоху коронавируса привычный порядок вещей такой, как посещения кафе или прогулка по улице, была менее доступна для человечества. Поэтому многие люди стали больше читать, что увеличило интерес к приложениям для чтения книг.\n",
    "\n",
    "Вот и наша выдуманая компания решила приобрести крупный сервис для чтения книг по подписке. Наша задача - проанализировать базу данных.  В ней — информация о книгах, издательствах, авторах, а также пользовательские обзоры книг. Эти данные помогут сформулировать ценностное предложение для нового продукта."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Цель исследования**:\n",
    "1. Проанализировать базу данных сервиса для чтения книг по подписке.\n",
    "\n",
    "**Ход исследования**\n",
    "\n",
    "Для анализа были получены следущие задачи от заказчика:\n",
    "\n",
    "1. Посчитать, сколько книг вышло после 1 января 2000 года;\n",
    "2. Для каждой книги посчитать количество обзоров и среднюю оценку;\n",
    "3. Определить издательство, которое выпустило наибольшее число книг толще 50 страниц;\n",
    "4. Определить автора с самой высокой средней оценкой книг — учесть только книги с 50 и более оценками;\n",
    "5. Посчитать среднее количество обзоров от пользователей, которые поставили больше 50 оценок.\n",
    "\n",
    "Выполним подключение к базе данных. Далее выполним несколько SQL-запросов. Для каждого запроса напишем краткий обзор. В конце, сделаем общий вывод.\n",
    "Таким образом, исследование пройдёт в несколько этапов:\n",
    " 1. Выполнение подключения к базе данных.\n",
    " 2. Выволнение SQL-запросов.\n",
    " 3. Общий вывод. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Анализ базы данных сервиса для чтения книг по подписке.\n",
    "\n",
    "_____\n",
    "###### Данное исследование разделим на несколько частей.\n",
    "\n",
    "##### Часть 1. Выполнение подключения к базе данных:\n",
    "* [1. Выполнение подключения к базе данных.](#1-bullet)\n",
    "* [2. Исследование таблиц.](#7-bullet)\n",
    "##### Часть 2. Выполнение SQL-запросов:\n",
    "* [1. Количество книг, изданных после 1 января 2000 года.](#2-bullet)\n",
    "* [2. Количество обзоров и средняя оценка для каждой книги.](#3-bullet)\n",
    "* [3. Определение издательства, выпустившее наибольшее число книг толще 50 страниц.](#4-bullet)\n",
    "* [4. Определение автора с самой высокой средней оценкой книг.](#5-bullet)\n",
    "* [5. Подсчет среднего количества обзоров от пользователей, поставивших больше 50 оценок.](#6-bullet)\n",
    "##### Общий вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Выполнение подключения к базе данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='1-bullet'></a>\n",
    "### Выполнение подключения к базе данных."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# импортируем библиотеки\n",
    "import pandas as pd\n",
    "from sqlalchemy import create_engine\n",
    "# устанавливаем параметры\n",
    "db_config = {'user': 'praktikum_student', # имя пользователя\n",
    "'pwd': 'Sdf4$2;d-d30pp', # пароль\n",
    "'host': 'rc1b-wcoijxj3yxfsf3fs.mdb.yandexcloud.net',\n",
    "'port': 6432, # порт подключения\n",
    "'db': 'data-analyst-final-project-db'} # название базы данных\n",
    "connection_string = 'postgresql://{}:{}@{}:{}/{}'.format(db_config['user'],\n",
    " db_config['pwd'],\n",
    " db_config['host'],\n",
    " db_config['port'],\n",
    " db_config['db'])\n",
    "# сохраняем коннектор\n",
    "engine = create_engine(connection_string, connect_args={'sslmode':'require'}) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='7-bullet'></a>\n",
    "### Исследование таблиц."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def primary(data):\n",
    "    display(data.info())\n",
    "    display(data.head())\n",
    "    display('Проверка на пропуски:',data.isna().sum())\n",
    "    display('Проверка на дубликаты:',data.duplicated().sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT *\n",
    "            FROM books\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "books = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1000 entries, 0 to 999\n",
      "Data columns (total 6 columns):\n",
      " #   Column            Non-Null Count  Dtype \n",
      "---  ------            --------------  ----- \n",
      " 0   book_id           1000 non-null   int64 \n",
      " 1   author_id         1000 non-null   int64 \n",
      " 2   title             1000 non-null   object\n",
      " 3   num_pages         1000 non-null   int64 \n",
      " 4   publication_date  1000 non-null   object\n",
      " 5   publisher_id      1000 non-null   int64 \n",
      "dtypes: int64(4), object(2)\n",
      "memory usage: 47.0+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>book_id</th>\n",
       "      <th>author_id</th>\n",
       "      <th>title</th>\n",
       "      <th>num_pages</th>\n",
       "      <th>publication_date</th>\n",
       "      <th>publisher_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>546</td>\n",
       "      <td>'Salem's Lot</td>\n",
       "      <td>594</td>\n",
       "      <td>2005-11-01</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>465</td>\n",
       "      <td>1 000 Places to See Before You Die</td>\n",
       "      <td>992</td>\n",
       "      <td>2003-05-22</td>\n",
       "      <td>336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>407</td>\n",
       "      <td>13 Little Blue Envelopes (Little Blue Envelope...</td>\n",
       "      <td>322</td>\n",
       "      <td>2010-12-21</td>\n",
       "      <td>135</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>82</td>\n",
       "      <td>1491: New Revelations of the Americas Before C...</td>\n",
       "      <td>541</td>\n",
       "      <td>2006-10-10</td>\n",
       "      <td>309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>125</td>\n",
       "      <td>1776</td>\n",
       "      <td>386</td>\n",
       "      <td>2006-07-04</td>\n",
       "      <td>268</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   book_id  author_id                                              title  \\\n",
       "0        1        546                                       'Salem's Lot   \n",
       "1        2        465                 1 000 Places to See Before You Die   \n",
       "2        3        407  13 Little Blue Envelopes (Little Blue Envelope...   \n",
       "3        4         82  1491: New Revelations of the Americas Before C...   \n",
       "4        5        125                                               1776   \n",
       "\n",
       "   num_pages publication_date  publisher_id  \n",
       "0        594       2005-11-01            93  \n",
       "1        992       2003-05-22           336  \n",
       "2        322       2010-12-21           135  \n",
       "3        541       2006-10-10           309  \n",
       "4        386       2006-07-04           268  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на пропуски:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "book_id             0\n",
       "author_id           0\n",
       "title               0\n",
       "num_pages           0\n",
       "publication_date    0\n",
       "publisher_id        0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на дубликаты:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(books)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT *\n",
    "            FROM authors\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "authors = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 636 entries, 0 to 635\n",
      "Data columns (total 2 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   author_id  636 non-null    int64 \n",
      " 1   author     636 non-null    object\n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 10.1+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author_id</th>\n",
       "      <th>author</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>A.S. Byatt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Aesop/Laura Harris/Laura Gibbs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Agatha Christie</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Alan Brennert</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Alan Moore/David   Lloyd</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   author_id                          author\n",
       "0          1                      A.S. Byatt\n",
       "1          2  Aesop/Laura Harris/Laura Gibbs\n",
       "2          3                 Agatha Christie\n",
       "3          4                   Alan Brennert\n",
       "4          5        Alan Moore/David   Lloyd"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на пропуски:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "author_id    0\n",
       "author       0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на дубликаты:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(authors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT *\n",
    "            FROM publishers\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "publishers = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 340 entries, 0 to 339\n",
      "Data columns (total 2 columns):\n",
      " #   Column        Non-Null Count  Dtype \n",
      "---  ------        --------------  ----- \n",
      " 0   publisher_id  340 non-null    int64 \n",
      " 1   publisher     340 non-null    object\n",
      "dtypes: int64(1), object(1)\n",
      "memory usage: 5.4+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>publisher_id</th>\n",
       "      <th>publisher</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Ace</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Ace Book</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Ace Books</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Ace Hardcover</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Addison Wesley Publishing Company</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   publisher_id                          publisher\n",
       "0             1                                Ace\n",
       "1             2                           Ace Book\n",
       "2             3                          Ace Books\n",
       "3             4                      Ace Hardcover\n",
       "4             5  Addison Wesley Publishing Company"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на пропуски:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "publisher_id    0\n",
       "publisher       0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на дубликаты:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(publishers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT *\n",
    "            FROM ratings\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "ratings = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6456 entries, 0 to 6455\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   rating_id  6456 non-null   int64 \n",
      " 1   book_id    6456 non-null   int64 \n",
      " 2   username   6456 non-null   object\n",
      " 3   rating     6456 non-null   int64 \n",
      "dtypes: int64(3), object(1)\n",
      "memory usage: 201.9+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>rating_id</th>\n",
       "      <th>book_id</th>\n",
       "      <th>username</th>\n",
       "      <th>rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ryanfranco</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>grantpatricia</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>brandtandrea</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>lorichen</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>mariokeller</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   rating_id  book_id       username  rating\n",
       "0          1        1     ryanfranco       4\n",
       "1          2        1  grantpatricia       2\n",
       "2          3        1   brandtandrea       5\n",
       "3          4        2       lorichen       3\n",
       "4          5        2    mariokeller       2"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на пропуски:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "rating_id    0\n",
       "book_id      0\n",
       "username     0\n",
       "rating       0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на дубликаты:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(ratings)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT *\n",
    "            FROM reviews\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2793 entries, 0 to 2792\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count  Dtype \n",
      "---  ------     --------------  ----- \n",
      " 0   review_id  2793 non-null   int64 \n",
      " 1   book_id    2793 non-null   int64 \n",
      " 2   username   2793 non-null   object\n",
      " 3   text       2793 non-null   object\n",
      "dtypes: int64(2), object(2)\n",
      "memory usage: 87.4+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>review_id</th>\n",
       "      <th>book_id</th>\n",
       "      <th>username</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>brandtandrea</td>\n",
       "      <td>Mention society tell send professor analysis. ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>ryanfranco</td>\n",
       "      <td>Foot glass pretty audience hit themselves. Amo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>lorichen</td>\n",
       "      <td>Listen treat keep worry. Miss husband tax but ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>johnsonamanda</td>\n",
       "      <td>Finally month interesting blue could nature cu...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>scotttamara</td>\n",
       "      <td>Nation purpose heavy give wait song will. List...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   review_id  book_id       username  \\\n",
       "0          1        1   brandtandrea   \n",
       "1          2        1     ryanfranco   \n",
       "2          3        2       lorichen   \n",
       "3          4        3  johnsonamanda   \n",
       "4          5        3    scotttamara   \n",
       "\n",
       "                                                text  \n",
       "0  Mention society tell send professor analysis. ...  \n",
       "1  Foot glass pretty audience hit themselves. Amo...  \n",
       "2  Listen treat keep worry. Miss husband tax but ...  \n",
       "3  Finally month interesting blue could nature cu...  \n",
       "4  Nation purpose heavy give wait song will. List...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на пропуски:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "review_id    0\n",
       "book_id      0\n",
       "username     0\n",
       "text         0\n",
       "dtype: int64"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Проверка на дубликаты:'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "primary(reviews)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Все таблицы не содержат пропусков данных и явных дубликатов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Выполнение SQL-запросов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2-bullet'></a>\n",
    "### Количество книг, изданных после 1 января 2000 года."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT COUNT(book_id)\n",
    "            FROM books\n",
    "            WHERE publication_date > '2000-01-01'\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "count_books = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>819</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   count\n",
       "0    819"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count_books"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "819 книг было выпущено после 1 января 2000 года."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='3-bullet'></a>\n",
    "### Количество обзоров и средняя оценка для каждой книги."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT b.title,\n",
    "                   cr.count_review,\n",
    "                   av.avg_rating\n",
    "            FROM books b\n",
    "            LEFT JOIN (SELECT book_id,\n",
    "                       COUNT(review_id) AS count_review\n",
    "                       FROM reviews \n",
    "                       GROUP BY book_id) AS cr ON b.book_id=cr.book_id\n",
    "            LEFT JOIN (SELECT book_id,\n",
    "                       AVG(rating) AS avg_rating\n",
    "                       FROM ratings \n",
    "                       GROUP BY book_id) AS av ON b.book_id=av.book_id\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "rating_books = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>count_review</th>\n",
       "      <th>avg_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>The Body in the Library (Miss Marple  #3)</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Galápagos</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>A Tree Grows in Brooklyn</td>\n",
       "      <td>5.0</td>\n",
       "      <td>4.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Undaunted Courage: The Pioneering First Missio...</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>The Prophet</td>\n",
       "      <td>4.0</td>\n",
       "      <td>4.285714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  count_review  avg_rating\n",
       "0          The Body in the Library (Miss Marple  #3)           2.0    4.500000\n",
       "1                                          Galápagos           2.0    4.500000\n",
       "2                           A Tree Grows in Brooklyn           5.0    4.250000\n",
       "3  Undaunted Courage: The Pioneering First Missio...           2.0    4.000000\n",
       "4                                        The Prophet           4.0    4.285714"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rating_books.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Топ 5 самых популярных книг."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>count_review</th>\n",
       "      <th>avg_rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>Twilight (Twilight  #1)</td>\n",
       "      <td>7.0</td>\n",
       "      <td>3.662500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651</th>\n",
       "      <td>Harry Potter and the Prisoner of Azkaban (Harr...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.414634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>747</th>\n",
       "      <td>Harry Potter and the Chamber of Secrets (Harry...</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.287500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>The Book Thief</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.264151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>The Glass Castle</td>\n",
       "      <td>6.0</td>\n",
       "      <td>4.206897</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 title  count_review  \\\n",
       "161                            Twilight (Twilight  #1)           7.0   \n",
       "651  Harry Potter and the Prisoner of Azkaban (Harr...           6.0   \n",
       "747  Harry Potter and the Chamber of Secrets (Harry...           6.0   \n",
       "975                                     The Book Thief           6.0   \n",
       "262                                   The Glass Castle           6.0   \n",
       "\n",
       "     avg_rating  \n",
       "161    3.662500  \n",
       "651    4.414634  \n",
       "747    4.287500  \n",
       "975    4.264151  \n",
       "262    4.206897  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rating_books.sort_values(by=['count_review','avg_rating'], ascending=False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT book_id,\n",
    "                   COUNT(review_id) AS count_review\n",
    "            FROM reviews \n",
    "            GROUP BY book_id\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>book_id</th>\n",
       "      <th>count_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>161</th>\n",
       "      <td>948</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>750</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>734</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>969</th>\n",
       "      <td>656</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>695</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     book_id  count_review\n",
       "161      948             7\n",
       "102      750             6\n",
       "261      734             6\n",
       "969      656             6\n",
       "41       695             6"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.sort_values(by='count_review', ascending=False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT book_id,\n",
    "                   COUNT(rating_id) AS count_rating\n",
    "            FROM ratings \n",
    "            GROUP BY book_id\n",
    "        '''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='4-bullet'></a>\n",
    "### Определение издательства, выпустившее наибольшее число книг толще 50 страниц."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT pu.publisher,\n",
    "                   COUNT(b.book_id)\n",
    "            FROM publishers pu\n",
    "            RIGHT JOIN books b ON b.publisher_id=pu.publisher_id\n",
    "            WHERE num_pages > 50\n",
    "            GROUP BY pu.publisher\n",
    "            ORDER BY COUNT(b.book_id) DESC\n",
    "            LIMIT 1\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "publisher = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>publisher</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Penguin Books</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       publisher  count\n",
       "0  Penguin Books     42"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "publisher"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Издательство `Penguin Books` выпустило самое большое количество книг толще 50 страниц."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='5-bullet'></a>\n",
    "### Определение автора с самой высокой средней оценкой книг."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT au.author\n",
    "            FROM \n",
    "               (SELECT b.book_id,\n",
    "                       b.title,\n",
    "                       b.author_id,\n",
    "                       cr.count_review,\n",
    "                       av.avg_rating\n",
    "                FROM books b\n",
    "                LEFT JOIN (SELECT book_id,\n",
    "                           COUNT(review_id) AS count_review\n",
    "                           FROM reviews \n",
    "                           GROUP BY book_id) AS cr ON b.book_id=cr.book_id\n",
    "                LEFT JOIN (SELECT book_id,\n",
    "                           AVG(rating) AS avg_rating\n",
    "                           FROM ratings \n",
    "                           GROUP BY book_id) AS av ON b.book_id=av.book_id) AS best_rating\n",
    "            LEFT JOIN authors au ON best_rating.author_id=au.author_id\n",
    "            LEFT JOIN (SELECT book_id,\n",
    "                       COUNT(rating_id) AS count_rating\n",
    "                       FROM ratings \n",
    "                       GROUP BY book_id) AS cor ON cor.book_id=best_rating.book_id\n",
    "            WHERE cor.count_rating > 50\n",
    "            ORDER BY best_rating.avg_rating DESC\n",
    "            LIMIT 1;\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "author = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>author</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>J.K. Rowling/Mary GrandPré</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       author\n",
       "0  J.K. Rowling/Mary GrandPré"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "author"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`J.K. Rowling/Mary GrandPré` - автор с самой высокой средней оценкой книги среди книг, набравших более 50 оценок."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='6-bullet'></a>\n",
    "### Подсчет среднего количества обзоров от пользователей, поставивших больше 50 оценок."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "query = ''' SELECT ROUND(AVG(count_reviews),0)\n",
    "            FROM\n",
    "                (SELECT COUNT(review_id) AS count_reviews\n",
    "                FROM reviews\n",
    "                WHERE username IN (SELECT username\n",
    "                                   FROM \n",
    "                                       (SELECT username,\n",
    "                                               COUNT(rating_id) AS rating_count\n",
    "                                       FROM ratings\n",
    "                                       GROUP BY username) AS rc\n",
    "                                   WHERE rating_count > 50)\n",
    "                GROUP BY username) AS count_re\n",
    "        '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews = pd.io.sql.read_sql(query, con = engine)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>round</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>24.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   round\n",
       "0   24.0"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Среднее количество обзоров от пользователей, поставивших больше 50 оценок, равно 24."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Вывод."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данном проекты мы выполнили подключение к базе данных. Проверили таблицы на пропуски и дубликаты, а также провели краткий обзор. \n",
    "\n",
    "Далее выполнили несколько SQL запросов, из которых выяснили, что:\n",
    "* 819 книг было выпущено после 1 января 2000 года.\n",
    "* Топ 5 самых популярных книг:\n",
    "1. Twilight (Twilight #1)\n",
    "2. Harry Potter and the Prisoner of Azkaban\t\n",
    "3. Harry Potter and the Chamber of Secrets\n",
    "4. The Book Thief\n",
    "5. The Glass Castle\n",
    "* Издательство `Penguin Books` выпустило самое большое количество книг толще 50 страниц.\n",
    "* `J.K. Rowling/Mary GrandPré` - автор с с самой высокой средней оценкой книги среди книг, набравших более 50 оценок.\n",
    "* Среднее количество обзоров от пользователей, поставивших больше 50 оценок, равно 24."
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 8153,
    "start_time": "2022-12-21T16:11:46.507Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-21T16:35:38.610Z"
   },
   {
    "duration": 8464,
    "start_time": "2022-12-21T16:37:16.974Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T16:45:30.293Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T16:46:54.039Z"
   },
   {
    "duration": 56,
    "start_time": "2022-12-21T16:47:18.069Z"
   },
   {
    "duration": 35,
    "start_time": "2022-12-21T16:47:32.947Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T16:48:19.924Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-21T16:48:22.151Z"
   },
   {
    "duration": 69,
    "start_time": "2022-12-21T16:48:33.674Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T16:48:58.947Z"
   },
   {
    "duration": 35,
    "start_time": "2022-12-21T16:49:02.115Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T16:49:50.239Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-21T16:50:09.116Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-21T16:50:22.014Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T16:51:04.148Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-21T16:52:01.394Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-21T16:52:14.402Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T16:52:49.934Z"
   },
   {
    "duration": 42,
    "start_time": "2022-12-21T16:52:50.384Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-21T16:53:05.836Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T16:53:25.230Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-21T16:53:45.645Z"
   },
   {
    "duration": 27,
    "start_time": "2022-12-21T16:53:59.469Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T16:58:00.833Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-21T16:58:22.469Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-21T16:58:27.933Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T17:06:15.932Z"
   },
   {
    "duration": 171,
    "start_time": "2022-12-21T17:06:26.867Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T17:07:21.647Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-21T17:07:22.165Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-21T17:07:29.865Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T17:08:14.017Z"
   },
   {
    "duration": 87,
    "start_time": "2022-12-21T17:08:14.588Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-21T17:08:15.142Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T17:08:23.235Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-21T17:08:27.159Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-21T17:08:28.714Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-21T17:09:12.240Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-21T17:09:32.130Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-21T17:09:52.898Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-21T17:10:02.093Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-21T17:11:24.350Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-21T17:11:43.394Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-21T17:11:52.422Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-21T17:12:19.090Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-21T17:13:50.672Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-21T17:14:44.690Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T17:23:37.169Z"
   },
   {
    "duration": 94,
    "start_time": "2022-12-21T17:23:38.196Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T17:24:35.597Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-21T17:24:36.806Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-21T17:24:37.644Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-21T17:24:52.280Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T17:25:10.844Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T17:25:33.399Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-21T17:25:34.036Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-21T17:25:40.474Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T19:38:17.991Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T19:38:38.427Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-21T19:38:41.293Z"
   },
   {
    "duration": 18,
    "start_time": "2022-12-21T19:38:43.851Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T19:40:20.886Z"
   },
   {
    "duration": 19,
    "start_time": "2022-12-21T19:40:21.523Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-21T19:40:21.998Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T19:40:32.345Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-21T19:40:33.182Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-21T19:40:33.734Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T19:41:06.959Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-21T19:41:07.607Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-21T19:41:08.334Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T19:46:52.645Z"
   },
   {
    "duration": 94,
    "start_time": "2022-12-21T19:47:18.825Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T19:47:40.976Z"
   },
   {
    "duration": 232,
    "start_time": "2022-12-21T19:47:43.260Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-21T19:47:50.344Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T19:51:33.454Z"
   },
   {
    "duration": 633,
    "start_time": "2022-12-21T19:51:34.540Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-21T19:51:35.808Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T19:53:19.955Z"
   },
   {
    "duration": 41,
    "start_time": "2022-12-21T19:53:20.796Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-21T19:53:22.499Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T19:54:03.135Z"
   },
   {
    "duration": 165,
    "start_time": "2022-12-21T19:54:03.975Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T19:54:19.028Z"
   },
   {
    "duration": 93,
    "start_time": "2022-12-21T19:54:20.640Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T19:54:34.536Z"
   },
   {
    "duration": 35,
    "start_time": "2022-12-21T19:54:35.390Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-21T19:54:36.669Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-21T19:57:47.385Z"
   },
   {
    "duration": 102,
    "start_time": "2022-12-21T19:57:48.233Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T19:57:57.439Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-21T19:57:58.409Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-21T19:57:59.526Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T20:00:37.399Z"
   },
   {
    "duration": 97,
    "start_time": "2022-12-21T20:00:38.338Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T20:00:48.358Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-21T20:00:49.413Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-21T20:00:50.719Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T20:02:50.137Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-21T20:02:50.872Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-21T20:02:52.037Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T20:04:18.934Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-21T20:04:19.785Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-21T20:04:20.812Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-21T20:05:11.314Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-21T20:05:12.194Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-21T20:05:12.979Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T20:05:20.663Z"
   },
   {
    "duration": 31,
    "start_time": "2022-12-21T20:05:21.214Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-21T20:05:21.848Z"
   },
   {
    "duration": 8067,
    "start_time": "2022-12-21T20:12:29.802Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T20:12:37.870Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-21T20:12:37.875Z"
   },
   {
    "duration": 54,
    "start_time": "2022-12-21T20:12:37.884Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-21T20:12:37.940Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T20:12:37.971Z"
   },
   {
    "duration": 16,
    "start_time": "2022-12-21T20:12:37.974Z"
   },
   {
    "duration": 24,
    "start_time": "2022-12-21T20:12:37.992Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T20:12:38.018Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-21T20:12:38.022Z"
   },
   {
    "duration": 46,
    "start_time": "2022-12-21T20:12:38.039Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T20:12:38.087Z"
   },
   {
    "duration": 42,
    "start_time": "2022-12-21T20:12:38.091Z"
   },
   {
    "duration": 28,
    "start_time": "2022-12-21T20:12:38.136Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-21T20:12:38.166Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-21T20:12:38.180Z"
   },
   {
    "duration": 25,
    "start_time": "2022-12-21T20:12:38.205Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-21T20:12:38.232Z"
   },
   {
    "duration": 32,
    "start_time": "2022-12-21T20:12:38.236Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-21T20:12:38.270Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-21T20:12:38.281Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-21T20:12:38.289Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-21T20:12:38.317Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-21T20:12:38.329Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-21T20:12:38.346Z"
   },
   {
    "duration": 13,
    "start_time": "2022-12-21T20:12:38.350Z"
   },
   {
    "duration": 17,
    "start_time": "2022-12-21T20:12:38.365Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-21T20:12:38.384Z"
   },
   {
    "duration": 60,
    "start_time": "2022-12-21T20:12:38.395Z"
   },
   {
    "duration": 14,
    "start_time": "2022-12-21T20:12:38.458Z"
   },
   {
    "duration": 15,
    "start_time": "2022-12-21T20:12:38.474Z"
   },
   {
    "duration": 47,
    "start_time": "2022-12-21T20:12:38.491Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-21T20:12:38.540Z"
   },
   {
    "duration": 5537,
    "start_time": "2022-12-22T19:58:49.969Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T19:58:55.508Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-22T19:58:55.513Z"
   },
   {
    "duration": 271,
    "start_time": "2022-12-22T19:58:55.536Z"
   },
   {
    "duration": 33,
    "start_time": "2022-12-22T19:58:55.809Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T19:58:55.843Z"
   },
   {
    "duration": 80,
    "start_time": "2022-12-22T19:58:55.847Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-22T19:58:55.928Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T19:58:55.951Z"
   },
   {
    "duration": 74,
    "start_time": "2022-12-22T19:58:55.955Z"
   },
   {
    "duration": 21,
    "start_time": "2022-12-22T19:58:56.031Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T19:58:56.054Z"
   },
   {
    "duration": 98,
    "start_time": "2022-12-22T19:58:56.058Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-22T19:58:56.158Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T19:58:56.182Z"
   },
   {
    "duration": 88,
    "start_time": "2022-12-22T19:58:56.186Z"
   },
   {
    "duration": 26,
    "start_time": "2022-12-22T19:58:56.276Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T19:58:56.303Z"
   },
   {
    "duration": 98,
    "start_time": "2022-12-22T19:58:56.308Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-22T19:58:56.408Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-22T19:58:56.427Z"
   },
   {
    "duration": 89,
    "start_time": "2022-12-22T19:58:56.440Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-22T19:58:56.532Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-22T19:58:56.543Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T19:58:56.573Z"
   },
   {
    "duration": 74,
    "start_time": "2022-12-22T19:58:56.578Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T19:58:56.653Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T19:58:56.662Z"
   },
   {
    "duration": 85,
    "start_time": "2022-12-22T19:58:56.669Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-22T19:58:56.755Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-22T19:58:56.762Z"
   },
   {
    "duration": 105,
    "start_time": "2022-12-22T19:58:56.768Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-22T19:58:56.874Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:02:23.538Z"
   },
   {
    "duration": 185,
    "start_time": "2022-12-22T20:02:38.856Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:02:55.959Z"
   },
   {
    "duration": 128,
    "start_time": "2022-12-22T20:02:56.561Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T20:03:02.510Z"
   },
   {
    "duration": 84,
    "start_time": "2022-12-22T20:03:03.207Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:03:23.603Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T20:05:07.467Z"
   },
   {
    "duration": 96,
    "start_time": "2022-12-22T20:05:08.175Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-22T20:05:09.078Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-22T20:05:11.032Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:06:57.778Z"
   },
   {
    "duration": 127,
    "start_time": "2022-12-22T20:06:58.623Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:07:23.863Z"
   },
   {
    "duration": 101,
    "start_time": "2022-12-22T20:07:24.473Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:07:25.365Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-22T20:07:27.521Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-22T20:12:08.034Z"
   },
   {
    "duration": 90,
    "start_time": "2022-12-22T20:12:09.000Z"
   },
   {
    "duration": 8,
    "start_time": "2022-12-22T20:12:09.836Z"
   },
   {
    "duration": 10,
    "start_time": "2022-12-22T20:12:13.824Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T20:12:21.524Z"
   },
   {
    "duration": 99,
    "start_time": "2022-12-22T20:12:22.075Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:12:22.740Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-22T20:18:27.418Z"
   },
   {
    "duration": 71,
    "start_time": "2022-12-22T20:18:28.177Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:18:29.000Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T20:22:10.291Z"
   },
   {
    "duration": 130,
    "start_time": "2022-12-22T20:22:22.417Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-22T20:22:31.171Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-22T20:22:38.583Z"
   },
   {
    "duration": 11,
    "start_time": "2022-12-22T20:22:57.867Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:26:49.923Z"
   },
   {
    "duration": 85,
    "start_time": "2022-12-22T20:27:08.660Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:27:09.269Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:27:25.128Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:30:07.862Z"
   },
   {
    "duration": 165,
    "start_time": "2022-12-22T20:30:09.012Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:31:28.641Z"
   },
   {
    "duration": 133,
    "start_time": "2022-12-22T20:31:29.347Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:31:38.865Z"
   },
   {
    "duration": 77,
    "start_time": "2022-12-22T20:31:39.685Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T20:31:40.576Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-22T20:36:20.218Z"
   },
   {
    "duration": 127,
    "start_time": "2022-12-22T20:36:21.262Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:36:38.090Z"
   },
   {
    "duration": 78,
    "start_time": "2022-12-22T20:36:38.816Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-22T20:36:39.707Z"
   },
   {
    "duration": 5651,
    "start_time": "2022-12-22T20:39:15.925Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-22T20:39:21.577Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T20:39:21.582Z"
   },
   {
    "duration": 313,
    "start_time": "2022-12-22T20:39:21.589Z"
   },
   {
    "duration": 34,
    "start_time": "2022-12-22T20:39:21.904Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T20:39:21.939Z"
   },
   {
    "duration": 78,
    "start_time": "2022-12-22T20:39:21.943Z"
   },
   {
    "duration": 23,
    "start_time": "2022-12-22T20:39:22.024Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T20:39:22.048Z"
   },
   {
    "duration": 75,
    "start_time": "2022-12-22T20:39:22.053Z"
   },
   {
    "duration": 29,
    "start_time": "2022-12-22T20:39:22.131Z"
   },
   {
    "duration": 2,
    "start_time": "2022-12-22T20:39:22.161Z"
   },
   {
    "duration": 112,
    "start_time": "2022-12-22T20:39:22.164Z"
   },
   {
    "duration": 22,
    "start_time": "2022-12-22T20:39:22.278Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:39:22.301Z"
   },
   {
    "duration": 98,
    "start_time": "2022-12-22T20:39:22.305Z"
   },
   {
    "duration": 37,
    "start_time": "2022-12-22T20:39:22.405Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:39:22.444Z"
   },
   {
    "duration": 81,
    "start_time": "2022-12-22T20:39:22.448Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T20:39:22.532Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-22T20:39:22.539Z"
   },
   {
    "duration": 94,
    "start_time": "2022-12-22T20:39:22.549Z"
   },
   {
    "duration": 9,
    "start_time": "2022-12-22T20:39:22.644Z"
   },
   {
    "duration": 12,
    "start_time": "2022-12-22T20:39:22.654Z"
   },
   {
    "duration": 3,
    "start_time": "2022-12-22T20:39:22.667Z"
   },
   {
    "duration": 88,
    "start_time": "2022-12-22T20:39:22.671Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:39:22.761Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T20:39:22.771Z"
   },
   {
    "duration": 4,
    "start_time": "2022-12-22T20:39:22.778Z"
   },
   {
    "duration": 82,
    "start_time": "2022-12-22T20:39:22.784Z"
   },
   {
    "duration": 6,
    "start_time": "2022-12-22T20:39:22.867Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T20:39:22.875Z"
   },
   {
    "duration": 88,
    "start_time": "2022-12-22T20:39:22.881Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T20:39:22.971Z"
   },
   {
    "duration": 5,
    "start_time": "2022-12-22T20:39:22.978Z"
   },
   {
    "duration": 82,
    "start_time": "2022-12-22T20:39:22.984Z"
   },
   {
    "duration": 7,
    "start_time": "2022-12-22T20:39:23.067Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
